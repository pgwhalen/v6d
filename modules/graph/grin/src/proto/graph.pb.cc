// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: graph.proto

#include "graph.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace grin {
PROTOBUF_CONSTEXPR TopologyTrait::TopologyTrait(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vertex_list_retrievals_)*/{}
  , /*decltype(_impl_._vertex_list_retrievals_cached_byte_size_)*/{0}
  , /*decltype(_impl_.edge_list_retrievals_)*/{}
  , /*decltype(_impl_._edge_list_retrievals_cached_byte_size_)*/{0}
  , /*decltype(_impl_.adjacent_list_retrievals_)*/{}
  , /*decltype(_impl_._adjacent_list_retrievals_cached_byte_size_)*/{0}
  , /*decltype(_impl_.grin_assume_has_directed_graph_)*/false
  , /*decltype(_impl_.grin_assume_has_undirected_graph_)*/false
  , /*decltype(_impl_.grin_assume_has_multi_edge_graph_)*/false
  , /*decltype(_impl_.grin_with_vertex_original_id_)*/false
  , /*decltype(_impl_.grin_with_vertex_data_)*/false
  , /*decltype(_impl_.grin_with_edge_data_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TopologyTraitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TopologyTraitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TopologyTraitDefaultTypeInternal() {}
  union {
    TopologyTrait _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TopologyTraitDefaultTypeInternal _TopologyTrait_default_instance_;
PROTOBUF_CONSTEXPR MirrorPartitionListTrait::MirrorPartitionListTrait(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.grin_trait_master_vertex_mirror_partition_list_)*/false
  , /*decltype(_impl_.grin_trait_mirror_vertex_mirror_partition_list_)*/false
  , /*decltype(_impl_.grin_trait_master_edge_mirror_partition_list_)*/false
  , /*decltype(_impl_.grin_trait_mirror_edge_mirror_partition_list_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MirrorPartitionListTraitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MirrorPartitionListTraitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MirrorPartitionListTraitDefaultTypeInternal() {}
  union {
    MirrorPartitionListTrait _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MirrorPartitionListTraitDefaultTypeInternal _MirrorPartitionListTrait_default_instance_;
PROTOBUF_CONSTEXPR PartitionTrait::PartitionTrait(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.mirror_partition_list_trait_)*/nullptr
  , /*decltype(_impl_.graph_partition_strategy_)*/0
  , /*decltype(_impl_.grin_trait_natural_id_for_partition_)*/false
  , /*decltype(_impl_.grin_enable_vertex_ref_)*/false
  , /*decltype(_impl_.grin_enable_edge_ref_)*/false
  , /*decltype(_impl_.grin_trait_select_master_for_vertex_list_)*/false
  , /*decltype(_impl_.vertex_data_)*/0
  , /*decltype(_impl_.edge_data_)*/0
  , /*decltype(_impl_.grin_trait_select_partition_for_vertex_list_)*/false
  , /*decltype(_impl_.grin_trait_select_master_for_edge_list_)*/false
  , /*decltype(_impl_.grin_trait_select_partition_for_edge_list_)*/false
  , /*decltype(_impl_.grin_trait_select_master_neighbor_for_adjacent_list_)*/false
  , /*decltype(_impl_.grin_trait_select_neighbor_partition_for_adjacent_list_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PartitionTraitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PartitionTraitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PartitionTraitDefaultTypeInternal() {}
  union {
    PartitionTrait _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PartitionTraitDefaultTypeInternal _PartitionTrait_default_instance_;
PROTOBUF_CONSTEXPR VertexPropertyTrait::VertexPropertyTrait(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.grin_with_vertex_property_)*/false
  , /*decltype(_impl_.grin_with_vertex_property_name_)*/false
  , /*decltype(_impl_.grin_with_vertex_type_name_)*/false
  , /*decltype(_impl_.grin_enable_vertex_property_table_)*/false
  , /*decltype(_impl_.grin_enable_vertex_primary_keys_)*/false
  , /*decltype(_impl_.grin_trait_natural_id_for_vertex_type_)*/false
  , /*decltype(_impl_.grin_trait_natural_id_for_vertex_property_)*/false
  , /*decltype(_impl_.grin_assume_by_type_vertex_original_id_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VertexPropertyTraitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VertexPropertyTraitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VertexPropertyTraitDefaultTypeInternal() {}
  union {
    VertexPropertyTrait _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VertexPropertyTraitDefaultTypeInternal _VertexPropertyTrait_default_instance_;
PROTOBUF_CONSTEXPR EdgePropertyTrait::EdgePropertyTrait(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.grin_with_edge_property_)*/false
  , /*decltype(_impl_.grin_with_edge_property_name_)*/false
  , /*decltype(_impl_.grin_with_edge_type_name_)*/false
  , /*decltype(_impl_.grin_enable_edge_property_table_)*/false
  , /*decltype(_impl_.grin_enable_edge_primary_keys_)*/false
  , /*decltype(_impl_.grin_trait_natural_id_for_edge_type_)*/false
  , /*decltype(_impl_.grin_trait_natural_id_for_edge_property_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EdgePropertyTraitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EdgePropertyTraitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EdgePropertyTraitDefaultTypeInternal() {}
  union {
    EdgePropertyTrait _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EdgePropertyTraitDefaultTypeInternal _EdgePropertyTrait_default_instance_;
PROTOBUF_CONSTEXPR PropertyTrait::PropertyTrait(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vertex_property_trait_)*/nullptr
  , /*decltype(_impl_.edge_property_trait_)*/nullptr
  , /*decltype(_impl_.vertex_property_)*/0
  , /*decltype(_impl_.edge_property_)*/0
  , /*decltype(_impl_.grin_enable_row_)*/false
  , /*decltype(_impl_.grin_assume_column_store_for_vertex_property_)*/false
  , /*decltype(_impl_.grin_assume_column_store_for_edge_property_)*/false
  , /*decltype(_impl_.grin_trait_select_type_for_vertex_list_)*/false
  , /*decltype(_impl_.grin_trait_select_type_for_edge_list_)*/false
  , /*decltype(_impl_.grin_trait_select_neighbor_type_for_adjacent_list_)*/false
  , /*decltype(_impl_.grin_trait_select_edge_type_for_adjacent_list_)*/false
  , /*decltype(_impl_.grin_trait_specific_vev_relation_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PropertyTraitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PropertyTraitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PropertyTraitDefaultTypeInternal() {}
  union {
    PropertyTrait _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PropertyTraitDefaultTypeInternal _PropertyTrait_default_instance_;
PROTOBUF_CONSTEXPR IndexTrait::IndexTrait(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.grin_with_vertex_label_)*/false
  , /*decltype(_impl_.grin_with_edge_label_)*/false
  , /*decltype(_impl_.grin_assume_all_vertex_list_sorted_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IndexTraitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndexTraitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndexTraitDefaultTypeInternal() {}
  union {
    IndexTrait _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndexTraitDefaultTypeInternal _IndexTrait_default_instance_;
PROTOBUF_CONSTEXPR PredicateTrait::PredicateTrait(
    ::_pbi::ConstantInitialized) {}
struct PredicateTraitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PredicateTraitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PredicateTraitDefaultTypeInternal() {}
  union {
    PredicateTrait _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PredicateTraitDefaultTypeInternal _PredicateTrait_default_instance_;
PROTOBUF_CONSTEXPR StorageTrait::StorageTrait(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.specific_trait_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct StorageTraitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StorageTraitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StorageTraitDefaultTypeInternal() {}
  union {
    StorageTrait _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StorageTraitDefaultTypeInternal _StorageTrait_default_instance_;
PROTOBUF_CONSTEXPR Statistics::Statistics(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vertex_count_)*/0
  , /*decltype(_impl_.edge_count_)*/0
  , /*decltype(_impl_.partition_count_)*/0
  , /*decltype(_impl_.vertex_type_count_)*/0
  , /*decltype(_impl_.edge_type_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StatisticsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StatisticsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StatisticsDefaultTypeInternal() {}
  union {
    Statistics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StatisticsDefaultTypeInternal _Statistics_default_instance_;
PROTOBUF_CONSTEXPR Graph::Graph(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.traits_)*/{}
  , /*decltype(_impl_.uri_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.grin_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.statistics_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GraphDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GraphDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GraphDefaultTypeInternal() {}
  union {
    Graph _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GraphDefaultTypeInternal _Graph_default_instance_;
}  // namespace grin
static ::_pb::Metadata file_level_metadata_graph_2eproto[11];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_graph_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_graph_2eproto = nullptr;

const uint32_t TableStruct_graph_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grin::TopologyTrait, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grin::TopologyTrait, _impl_.grin_assume_has_directed_graph_),
  PROTOBUF_FIELD_OFFSET(::grin::TopologyTrait, _impl_.grin_assume_has_undirected_graph_),
  PROTOBUF_FIELD_OFFSET(::grin::TopologyTrait, _impl_.grin_assume_has_multi_edge_graph_),
  PROTOBUF_FIELD_OFFSET(::grin::TopologyTrait, _impl_.grin_with_vertex_original_id_),
  PROTOBUF_FIELD_OFFSET(::grin::TopologyTrait, _impl_.grin_with_vertex_data_),
  PROTOBUF_FIELD_OFFSET(::grin::TopologyTrait, _impl_.grin_with_edge_data_),
  PROTOBUF_FIELD_OFFSET(::grin::TopologyTrait, _impl_.vertex_list_retrievals_),
  PROTOBUF_FIELD_OFFSET(::grin::TopologyTrait, _impl_.edge_list_retrievals_),
  PROTOBUF_FIELD_OFFSET(::grin::TopologyTrait, _impl_.adjacent_list_retrievals_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grin::MirrorPartitionListTrait, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grin::MirrorPartitionListTrait, _impl_.grin_trait_master_vertex_mirror_partition_list_),
  PROTOBUF_FIELD_OFFSET(::grin::MirrorPartitionListTrait, _impl_.grin_trait_mirror_vertex_mirror_partition_list_),
  PROTOBUF_FIELD_OFFSET(::grin::MirrorPartitionListTrait, _impl_.grin_trait_master_edge_mirror_partition_list_),
  PROTOBUF_FIELD_OFFSET(::grin::MirrorPartitionListTrait, _impl_.grin_trait_mirror_edge_mirror_partition_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grin::PartitionTrait, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grin::PartitionTrait, _impl_.graph_partition_strategy_),
  PROTOBUF_FIELD_OFFSET(::grin::PartitionTrait, _impl_.grin_trait_natural_id_for_partition_),
  PROTOBUF_FIELD_OFFSET(::grin::PartitionTrait, _impl_.grin_enable_vertex_ref_),
  PROTOBUF_FIELD_OFFSET(::grin::PartitionTrait, _impl_.grin_enable_edge_ref_),
  PROTOBUF_FIELD_OFFSET(::grin::PartitionTrait, _impl_.vertex_data_),
  PROTOBUF_FIELD_OFFSET(::grin::PartitionTrait, _impl_.edge_data_),
  PROTOBUF_FIELD_OFFSET(::grin::PartitionTrait, _impl_.mirror_partition_list_trait_),
  PROTOBUF_FIELD_OFFSET(::grin::PartitionTrait, _impl_.grin_trait_select_master_for_vertex_list_),
  PROTOBUF_FIELD_OFFSET(::grin::PartitionTrait, _impl_.grin_trait_select_partition_for_vertex_list_),
  PROTOBUF_FIELD_OFFSET(::grin::PartitionTrait, _impl_.grin_trait_select_master_for_edge_list_),
  PROTOBUF_FIELD_OFFSET(::grin::PartitionTrait, _impl_.grin_trait_select_partition_for_edge_list_),
  PROTOBUF_FIELD_OFFSET(::grin::PartitionTrait, _impl_.grin_trait_select_master_neighbor_for_adjacent_list_),
  PROTOBUF_FIELD_OFFSET(::grin::PartitionTrait, _impl_.grin_trait_select_neighbor_partition_for_adjacent_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grin::VertexPropertyTrait, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grin::VertexPropertyTrait, _impl_.grin_with_vertex_property_),
  PROTOBUF_FIELD_OFFSET(::grin::VertexPropertyTrait, _impl_.grin_with_vertex_property_name_),
  PROTOBUF_FIELD_OFFSET(::grin::VertexPropertyTrait, _impl_.grin_with_vertex_type_name_),
  PROTOBUF_FIELD_OFFSET(::grin::VertexPropertyTrait, _impl_.grin_enable_vertex_property_table_),
  PROTOBUF_FIELD_OFFSET(::grin::VertexPropertyTrait, _impl_.grin_enable_vertex_primary_keys_),
  PROTOBUF_FIELD_OFFSET(::grin::VertexPropertyTrait, _impl_.grin_trait_natural_id_for_vertex_type_),
  PROTOBUF_FIELD_OFFSET(::grin::VertexPropertyTrait, _impl_.grin_trait_natural_id_for_vertex_property_),
  PROTOBUF_FIELD_OFFSET(::grin::VertexPropertyTrait, _impl_.grin_assume_by_type_vertex_original_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grin::EdgePropertyTrait, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grin::EdgePropertyTrait, _impl_.grin_with_edge_property_),
  PROTOBUF_FIELD_OFFSET(::grin::EdgePropertyTrait, _impl_.grin_with_edge_property_name_),
  PROTOBUF_FIELD_OFFSET(::grin::EdgePropertyTrait, _impl_.grin_with_edge_type_name_),
  PROTOBUF_FIELD_OFFSET(::grin::EdgePropertyTrait, _impl_.grin_enable_edge_property_table_),
  PROTOBUF_FIELD_OFFSET(::grin::EdgePropertyTrait, _impl_.grin_enable_edge_primary_keys_),
  PROTOBUF_FIELD_OFFSET(::grin::EdgePropertyTrait, _impl_.grin_trait_natural_id_for_edge_type_),
  PROTOBUF_FIELD_OFFSET(::grin::EdgePropertyTrait, _impl_.grin_trait_natural_id_for_edge_property_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grin::PropertyTrait, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grin::PropertyTrait, _impl_.grin_enable_row_),
  PROTOBUF_FIELD_OFFSET(::grin::PropertyTrait, _impl_.vertex_property_trait_),
  PROTOBUF_FIELD_OFFSET(::grin::PropertyTrait, _impl_.edge_property_trait_),
  PROTOBUF_FIELD_OFFSET(::grin::PropertyTrait, _impl_.vertex_property_),
  PROTOBUF_FIELD_OFFSET(::grin::PropertyTrait, _impl_.edge_property_),
  PROTOBUF_FIELD_OFFSET(::grin::PropertyTrait, _impl_.grin_assume_column_store_for_vertex_property_),
  PROTOBUF_FIELD_OFFSET(::grin::PropertyTrait, _impl_.grin_assume_column_store_for_edge_property_),
  PROTOBUF_FIELD_OFFSET(::grin::PropertyTrait, _impl_.grin_trait_select_type_for_vertex_list_),
  PROTOBUF_FIELD_OFFSET(::grin::PropertyTrait, _impl_.grin_trait_select_type_for_edge_list_),
  PROTOBUF_FIELD_OFFSET(::grin::PropertyTrait, _impl_.grin_trait_select_neighbor_type_for_adjacent_list_),
  PROTOBUF_FIELD_OFFSET(::grin::PropertyTrait, _impl_.grin_trait_select_edge_type_for_adjacent_list_),
  PROTOBUF_FIELD_OFFSET(::grin::PropertyTrait, _impl_.grin_trait_specific_vev_relation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grin::IndexTrait, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grin::IndexTrait, _impl_.grin_with_vertex_label_),
  PROTOBUF_FIELD_OFFSET(::grin::IndexTrait, _impl_.grin_with_edge_label_),
  PROTOBUF_FIELD_OFFSET(::grin::IndexTrait, _impl_.grin_assume_all_vertex_list_sorted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grin::PredicateTrait, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grin::StorageTrait, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::grin::StorageTrait, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::grin::StorageTrait, _impl_.specific_trait_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grin::Statistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grin::Statistics, _impl_.vertex_count_),
  PROTOBUF_FIELD_OFFSET(::grin::Statistics, _impl_.edge_count_),
  PROTOBUF_FIELD_OFFSET(::grin::Statistics, _impl_.partition_count_),
  PROTOBUF_FIELD_OFFSET(::grin::Statistics, _impl_.vertex_type_count_),
  PROTOBUF_FIELD_OFFSET(::grin::Statistics, _impl_.edge_type_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::grin::Graph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::grin::Graph, _impl_.uri_),
  PROTOBUF_FIELD_OFFSET(::grin::Graph, _impl_.grin_version_),
  PROTOBUF_FIELD_OFFSET(::grin::Graph, _impl_.traits_),
  PROTOBUF_FIELD_OFFSET(::grin::Graph, _impl_.statistics_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::grin::TopologyTrait)},
  { 15, -1, -1, sizeof(::grin::MirrorPartitionListTrait)},
  { 25, -1, -1, sizeof(::grin::PartitionTrait)},
  { 44, -1, -1, sizeof(::grin::VertexPropertyTrait)},
  { 58, -1, -1, sizeof(::grin::EdgePropertyTrait)},
  { 71, -1, -1, sizeof(::grin::PropertyTrait)},
  { 89, -1, -1, sizeof(::grin::IndexTrait)},
  { 98, -1, -1, sizeof(::grin::PredicateTrait)},
  { 104, -1, -1, sizeof(::grin::StorageTrait)},
  { 116, -1, -1, sizeof(::grin::Statistics)},
  { 127, -1, -1, sizeof(::grin::Graph)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::grin::_TopologyTrait_default_instance_._instance,
  &::grin::_MirrorPartitionListTrait_default_instance_._instance,
  &::grin::_PartitionTrait_default_instance_._instance,
  &::grin::_VertexPropertyTrait_default_instance_._instance,
  &::grin::_EdgePropertyTrait_default_instance_._instance,
  &::grin::_PropertyTrait_default_instance_._instance,
  &::grin::_IndexTrait_default_instance_._instance,
  &::grin::_PredicateTrait_default_instance_._instance,
  &::grin::_StorageTrait_default_instance_._instance,
  &::grin::_Statistics_default_instance_._instance,
  &::grin::_Graph_default_instance_._instance,
};

const char descriptor_table_protodef_graph_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013graph.proto\022\004grin\"\214\003\n\rTopologyTrait\022&\n"
  "\036grin_assume_has_directed_graph\030\001 \001(\010\022(\n"
  " grin_assume_has_undirected_graph\030\002 \001(\010\022"
  "(\n grin_assume_has_multi_edge_graph\030\003 \001("
  "\010\022$\n\034grin_with_vertex_original_id\030\004 \001(\010\022"
  "\035\n\025grin_with_vertex_data\030\005 \001(\010\022\033\n\023grin_w"
  "ith_edge_data\030\006 \001(\010\0223\n\026vertex_list_retri"
  "evals\030\007 \003(\0162\023.grin.ListRetrieval\0221\n\024edge"
  "_list_retrievals\030\010 \003(\0162\023.grin.ListRetrie"
  "val\0225\n\030adjacent_list_retrievals\030\t \003(\0162\023."
  "grin.ListRetrieval\"\366\001\n\030MirrorPartitionLi"
  "stTrait\0226\n.grin_trait_master_vertex_mirr"
  "or_partition_list\030\001 \001(\010\0226\n.grin_trait_mi"
  "rror_vertex_mirror_partition_list\030\002 \001(\010\022"
  "4\n,grin_trait_master_edge_mirror_partiti"
  "on_list\030\003 \001(\010\0224\n,grin_trait_mirror_edge_"
  "mirror_partition_list\030\004 \001(\010\"\271\005\n\016Partitio"
  "nTrait\022>\n\030graph_partition_strategy\030\001 \001(\016"
  "2\034.grin.GraphPartitionStrategy\022+\n#grin_t"
  "rait_natural_id_for_partition\030\002 \001(\010\022\036\n\026g"
  "rin_enable_vertex_ref\030\003 \001(\010\022\034\n\024grin_enab"
  "le_edge_ref\030\004 \001(\010\0228\n\013vertex_data\030\005 \001(\0162#"
  ".grin.PropertyDataPartitionStrategy\0226\n\te"
  "dge_data\030\006 \001(\0162#.grin.PropertyDataPartit"
  "ionStrategy\022C\n\033mirror_partition_list_tra"
  "it\030\007 \001(\0132\036.grin.MirrorPartitionListTrait"
  "\0220\n(grin_trait_select_master_for_vertex_"
  "list\030\010 \001(\010\0223\n+grin_trait_select_partitio"
  "n_for_vertex_list\030\t \001(\010\022.\n&grin_trait_se"
  "lect_master_for_edge_list\030\n \001(\010\0221\n)grin_"
  "trait_select_partition_for_edge_list\030\013 \001"
  "(\010\022;\n3grin_trait_select_master_neighbor_"
  "for_adjacent_list\030\014 \001(\010\022>\n6grin_trait_se"
  "lect_neighbor_partition_for_adjacent_lis"
  "t\030\r \001(\010\"\352\002\n\023VertexPropertyTrait\022!\n\031grin_"
  "with_vertex_property\030\001 \001(\010\022&\n\036grin_with_"
  "vertex_property_name\030\002 \001(\010\022\"\n\032grin_with_"
  "vertex_type_name\030\003 \001(\010\022)\n!grin_enable_ve"
  "rtex_property_table\030\004 \001(\010\022\'\n\037grin_enable"
  "_vertex_primary_keys\030\005 \001(\010\022-\n%grin_trait"
  "_natural_id_for_vertex_type\030\006 \001(\010\0221\n)gri"
  "n_trait_natural_id_for_vertex_property\030\007"
  " \001(\010\022.\n&grin_assume_by_type_vertex_origi"
  "nal_id\030\010 \001(\010\"\252\002\n\021EdgePropertyTrait\022\037\n\027gr"
  "in_with_edge_property\030\001 \001(\010\022$\n\034grin_with"
  "_edge_property_name\030\002 \001(\010\022 \n\030grin_with_e"
  "dge_type_name\030\003 \001(\010\022\'\n\037grin_enable_edge_"
  "property_table\030\004 \001(\010\022%\n\035grin_enable_edge"
  "_primary_keys\030\005 \001(\010\022+\n#grin_trait_natura"
  "l_id_for_edge_type\030\006 \001(\010\022/\n\'grin_trait_n"
  "atural_id_for_edge_property\030\007 \001(\010\"\366\004\n\rPr"
  "opertyTrait\022\027\n\017grin_enable_row\030\001 \001(\010\0228\n\025"
  "vertex_property_trait\030\002 \001(\0132\031.grin.Verte"
  "xPropertyTrait\0224\n\023edge_property_trait\030\003 "
  "\001(\0132\027.grin.EdgePropertyTrait\022<\n\017vertex_p"
  "roperty\030\004 \001(\0162#.grin.PropertyDataPartiti"
  "onStrategy\022:\n\redge_property\030\005 \001(\0162#.grin"
  ".PropertyDataPartitionStrategy\0224\n,grin_a"
  "ssume_column_store_for_vertex_property\030\006"
  " \001(\010\0222\n*grin_assume_column_store_for_edg"
  "e_property\030\007 \001(\010\022.\n&grin_trait_select_ty"
  "pe_for_vertex_list\030\010 \001(\010\022,\n$grin_trait_s"
  "elect_type_for_edge_list\030\t \001(\010\0229\n1grin_t"
  "rait_select_neighbor_type_for_adjacent_l"
  "ist\030\n \001(\010\0225\n-grin_trait_select_edge_type"
  "_for_adjacent_list\030\013 \001(\010\022(\n grin_trait_s"
  "pecific_vev_relation\030\014 \001(\010\"v\n\nIndexTrait"
  "\022\036\n\026grin_with_vertex_label\030\001 \001(\010\022\034\n\024grin"
  "_with_edge_label\030\002 \001(\010\022*\n\"grin_assume_al"
  "l_vertex_list_sorted\030\003 \001(\010\"\020\n\016PredicateT"
  "rait\"\211\002\n\014StorageTrait\022-\n\016topology_trait\030"
  "\001 \001(\0132\023.grin.TopologyTraitH\000\022/\n\017partitio"
  "n_trait\030\002 \001(\0132\024.grin.PartitionTraitH\000\022-\n"
  "\016property_trait\030\003 \001(\0132\023.grin.PropertyTra"
  "itH\000\022\'\n\013index_trait\030\004 \001(\0132\020.grin.IndexTr"
  "aitH\000\022/\n\017predicate_trait\030\005 \001(\0132\024.grin.Pr"
  "edicateTraitH\000B\020\n\016specific_trait\"\203\001\n\nSta"
  "tistics\022\024\n\014vertex_count\030\001 \001(\005\022\022\n\nedge_co"
  "unt\030\002 \001(\005\022\027\n\017partition_count\030\003 \001(\005\022\031\n\021ve"
  "rtex_type_count\030\004 \001(\005\022\027\n\017edge_type_count"
  "\030\005 \001(\005\"t\n\005Graph\022\013\n\003uri\030\001 \001(\t\022\024\n\014grin_ver"
  "sion\030\002 \001(\t\022\"\n\006traits\030\003 \003(\0132\022.grin.Storag"
  "eTrait\022$\n\nstatistics\030\004 \001(\0132\020.grin.Statis"
  "tics*>\n\rListRetrieval\022\t\n\005LR_NA\020\000\022\021\n\rLR_A"
  "RRAY_LIKE\020\001\022\017\n\013LR_ITERATOR\020\002*u\n\026GraphPar"
  "titionStrategy\022\n\n\006GPS_NA\020\000\022\025\n\021GPS_ALL_RE"
  "PLICATE\020\001\022\020\n\014GPS_EDGE_CUT\020\002\022\022\n\016GPS_VERTE"
  "X_CUT\020\003\022\022\n\016GPS_HYBRID_CUT\020\004*\202\001\n\035Property"
  "DataPartitionStrategy\022\013\n\007PDPS_NA\020\000\022\024\n\020PD"
  "PS_MASTER_ONLY\020\001\022 \n\034PDPS_REPLICATE_MASTE"
  "R_MIRROR\020\002\022\034\n\030PDPS_SPLIT_MASTER_MIRROR\020\003"
  "b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_graph_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_graph_2eproto = {
    false, false, 3648, descriptor_table_protodef_graph_2eproto,
    "graph.proto",
    &descriptor_table_graph_2eproto_once, nullptr, 0, 11,
    schemas, file_default_instances, TableStruct_graph_2eproto::offsets,
    file_level_metadata_graph_2eproto, file_level_enum_descriptors_graph_2eproto,
    file_level_service_descriptors_graph_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_graph_2eproto_getter() {
  return &descriptor_table_graph_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_graph_2eproto(&descriptor_table_graph_2eproto);
namespace grin {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ListRetrieval_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_graph_2eproto);
  return file_level_enum_descriptors_graph_2eproto[0];
}
bool ListRetrieval_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GraphPartitionStrategy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_graph_2eproto);
  return file_level_enum_descriptors_graph_2eproto[1];
}
bool GraphPartitionStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PropertyDataPartitionStrategy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_graph_2eproto);
  return file_level_enum_descriptors_graph_2eproto[2];
}
bool PropertyDataPartitionStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TopologyTrait::_Internal {
 public:
};

TopologyTrait::TopologyTrait(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grin.TopologyTrait)
}
TopologyTrait::TopologyTrait(const TopologyTrait& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TopologyTrait* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vertex_list_retrievals_){from._impl_.vertex_list_retrievals_}
    , /*decltype(_impl_._vertex_list_retrievals_cached_byte_size_)*/{0}
    , decltype(_impl_.edge_list_retrievals_){from._impl_.edge_list_retrievals_}
    , /*decltype(_impl_._edge_list_retrievals_cached_byte_size_)*/{0}
    , decltype(_impl_.adjacent_list_retrievals_){from._impl_.adjacent_list_retrievals_}
    , /*decltype(_impl_._adjacent_list_retrievals_cached_byte_size_)*/{0}
    , decltype(_impl_.grin_assume_has_directed_graph_){}
    , decltype(_impl_.grin_assume_has_undirected_graph_){}
    , decltype(_impl_.grin_assume_has_multi_edge_graph_){}
    , decltype(_impl_.grin_with_vertex_original_id_){}
    , decltype(_impl_.grin_with_vertex_data_){}
    , decltype(_impl_.grin_with_edge_data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.grin_assume_has_directed_graph_, &from._impl_.grin_assume_has_directed_graph_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.grin_with_edge_data_) -
    reinterpret_cast<char*>(&_impl_.grin_assume_has_directed_graph_)) + sizeof(_impl_.grin_with_edge_data_));
  // @@protoc_insertion_point(copy_constructor:grin.TopologyTrait)
}

inline void TopologyTrait::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vertex_list_retrievals_){arena}
    , /*decltype(_impl_._vertex_list_retrievals_cached_byte_size_)*/{0}
    , decltype(_impl_.edge_list_retrievals_){arena}
    , /*decltype(_impl_._edge_list_retrievals_cached_byte_size_)*/{0}
    , decltype(_impl_.adjacent_list_retrievals_){arena}
    , /*decltype(_impl_._adjacent_list_retrievals_cached_byte_size_)*/{0}
    , decltype(_impl_.grin_assume_has_directed_graph_){false}
    , decltype(_impl_.grin_assume_has_undirected_graph_){false}
    , decltype(_impl_.grin_assume_has_multi_edge_graph_){false}
    , decltype(_impl_.grin_with_vertex_original_id_){false}
    , decltype(_impl_.grin_with_vertex_data_){false}
    , decltype(_impl_.grin_with_edge_data_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TopologyTrait::~TopologyTrait() {
  // @@protoc_insertion_point(destructor:grin.TopologyTrait)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TopologyTrait::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vertex_list_retrievals_.~RepeatedField();
  _impl_.edge_list_retrievals_.~RepeatedField();
  _impl_.adjacent_list_retrievals_.~RepeatedField();
}

void TopologyTrait::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TopologyTrait::Clear() {
// @@protoc_insertion_point(message_clear_start:grin.TopologyTrait)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vertex_list_retrievals_.Clear();
  _impl_.edge_list_retrievals_.Clear();
  _impl_.adjacent_list_retrievals_.Clear();
  ::memset(&_impl_.grin_assume_has_directed_graph_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.grin_with_edge_data_) -
      reinterpret_cast<char*>(&_impl_.grin_assume_has_directed_graph_)) + sizeof(_impl_.grin_with_edge_data_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TopologyTrait::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool grin_assume_has_directed_graph = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grin_assume_has_directed_graph_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_assume_has_undirected_graph = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.grin_assume_has_undirected_graph_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_assume_has_multi_edge_graph = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.grin_assume_has_multi_edge_graph_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_with_vertex_original_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.grin_with_vertex_original_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_with_vertex_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.grin_with_vertex_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_with_edge_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.grin_with_edge_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .grin.ListRetrieval vertex_list_retrievals = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_vertex_list_retrievals(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_vertex_list_retrievals(static_cast<::grin::ListRetrieval>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .grin.ListRetrieval edge_list_retrievals = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_edge_list_retrievals(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_edge_list_retrievals(static_cast<::grin::ListRetrieval>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .grin.ListRetrieval adjacent_list_retrievals = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_adjacent_list_retrievals(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_adjacent_list_retrievals(static_cast<::grin::ListRetrieval>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TopologyTrait::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grin.TopologyTrait)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool grin_assume_has_directed_graph = 1;
  if (this->_internal_grin_assume_has_directed_graph() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_grin_assume_has_directed_graph(), target);
  }

  // bool grin_assume_has_undirected_graph = 2;
  if (this->_internal_grin_assume_has_undirected_graph() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_grin_assume_has_undirected_graph(), target);
  }

  // bool grin_assume_has_multi_edge_graph = 3;
  if (this->_internal_grin_assume_has_multi_edge_graph() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_grin_assume_has_multi_edge_graph(), target);
  }

  // bool grin_with_vertex_original_id = 4;
  if (this->_internal_grin_with_vertex_original_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_grin_with_vertex_original_id(), target);
  }

  // bool grin_with_vertex_data = 5;
  if (this->_internal_grin_with_vertex_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_grin_with_vertex_data(), target);
  }

  // bool grin_with_edge_data = 6;
  if (this->_internal_grin_with_edge_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_grin_with_edge_data(), target);
  }

  // repeated .grin.ListRetrieval vertex_list_retrievals = 7;
  {
    int byte_size = _impl_._vertex_list_retrievals_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          7, _impl_.vertex_list_retrievals_, byte_size, target);
    }
  }

  // repeated .grin.ListRetrieval edge_list_retrievals = 8;
  {
    int byte_size = _impl_._edge_list_retrievals_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          8, _impl_.edge_list_retrievals_, byte_size, target);
    }
  }

  // repeated .grin.ListRetrieval adjacent_list_retrievals = 9;
  {
    int byte_size = _impl_._adjacent_list_retrievals_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          9, _impl_.adjacent_list_retrievals_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grin.TopologyTrait)
  return target;
}

size_t TopologyTrait::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grin.TopologyTrait)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .grin.ListRetrieval vertex_list_retrievals = 7;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_vertex_list_retrievals_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_vertex_list_retrievals(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._vertex_list_retrievals_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .grin.ListRetrieval edge_list_retrievals = 8;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_edge_list_retrievals_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_edge_list_retrievals(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._edge_list_retrievals_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .grin.ListRetrieval adjacent_list_retrievals = 9;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_adjacent_list_retrievals_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_adjacent_list_retrievals(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._adjacent_list_retrievals_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bool grin_assume_has_directed_graph = 1;
  if (this->_internal_grin_assume_has_directed_graph() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_assume_has_undirected_graph = 2;
  if (this->_internal_grin_assume_has_undirected_graph() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_assume_has_multi_edge_graph = 3;
  if (this->_internal_grin_assume_has_multi_edge_graph() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_with_vertex_original_id = 4;
  if (this->_internal_grin_with_vertex_original_id() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_with_vertex_data = 5;
  if (this->_internal_grin_with_vertex_data() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_with_edge_data = 6;
  if (this->_internal_grin_with_edge_data() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TopologyTrait::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TopologyTrait::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TopologyTrait::GetClassData() const { return &_class_data_; }


void TopologyTrait::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TopologyTrait*>(&to_msg);
  auto& from = static_cast<const TopologyTrait&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grin.TopologyTrait)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vertex_list_retrievals_.MergeFrom(from._impl_.vertex_list_retrievals_);
  _this->_impl_.edge_list_retrievals_.MergeFrom(from._impl_.edge_list_retrievals_);
  _this->_impl_.adjacent_list_retrievals_.MergeFrom(from._impl_.adjacent_list_retrievals_);
  if (from._internal_grin_assume_has_directed_graph() != 0) {
    _this->_internal_set_grin_assume_has_directed_graph(from._internal_grin_assume_has_directed_graph());
  }
  if (from._internal_grin_assume_has_undirected_graph() != 0) {
    _this->_internal_set_grin_assume_has_undirected_graph(from._internal_grin_assume_has_undirected_graph());
  }
  if (from._internal_grin_assume_has_multi_edge_graph() != 0) {
    _this->_internal_set_grin_assume_has_multi_edge_graph(from._internal_grin_assume_has_multi_edge_graph());
  }
  if (from._internal_grin_with_vertex_original_id() != 0) {
    _this->_internal_set_grin_with_vertex_original_id(from._internal_grin_with_vertex_original_id());
  }
  if (from._internal_grin_with_vertex_data() != 0) {
    _this->_internal_set_grin_with_vertex_data(from._internal_grin_with_vertex_data());
  }
  if (from._internal_grin_with_edge_data() != 0) {
    _this->_internal_set_grin_with_edge_data(from._internal_grin_with_edge_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TopologyTrait::CopyFrom(const TopologyTrait& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grin.TopologyTrait)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopologyTrait::IsInitialized() const {
  return true;
}

void TopologyTrait::InternalSwap(TopologyTrait* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vertex_list_retrievals_.InternalSwap(&other->_impl_.vertex_list_retrievals_);
  _impl_.edge_list_retrievals_.InternalSwap(&other->_impl_.edge_list_retrievals_);
  _impl_.adjacent_list_retrievals_.InternalSwap(&other->_impl_.adjacent_list_retrievals_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TopologyTrait, _impl_.grin_with_edge_data_)
      + sizeof(TopologyTrait::_impl_.grin_with_edge_data_)
      - PROTOBUF_FIELD_OFFSET(TopologyTrait, _impl_.grin_assume_has_directed_graph_)>(
          reinterpret_cast<char*>(&_impl_.grin_assume_has_directed_graph_),
          reinterpret_cast<char*>(&other->_impl_.grin_assume_has_directed_graph_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TopologyTrait::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[0]);
}

// ===================================================================

class MirrorPartitionListTrait::_Internal {
 public:
};

MirrorPartitionListTrait::MirrorPartitionListTrait(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grin.MirrorPartitionListTrait)
}
MirrorPartitionListTrait::MirrorPartitionListTrait(const MirrorPartitionListTrait& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MirrorPartitionListTrait* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.grin_trait_master_vertex_mirror_partition_list_){}
    , decltype(_impl_.grin_trait_mirror_vertex_mirror_partition_list_){}
    , decltype(_impl_.grin_trait_master_edge_mirror_partition_list_){}
    , decltype(_impl_.grin_trait_mirror_edge_mirror_partition_list_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.grin_trait_master_vertex_mirror_partition_list_, &from._impl_.grin_trait_master_vertex_mirror_partition_list_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.grin_trait_mirror_edge_mirror_partition_list_) -
    reinterpret_cast<char*>(&_impl_.grin_trait_master_vertex_mirror_partition_list_)) + sizeof(_impl_.grin_trait_mirror_edge_mirror_partition_list_));
  // @@protoc_insertion_point(copy_constructor:grin.MirrorPartitionListTrait)
}

inline void MirrorPartitionListTrait::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.grin_trait_master_vertex_mirror_partition_list_){false}
    , decltype(_impl_.grin_trait_mirror_vertex_mirror_partition_list_){false}
    , decltype(_impl_.grin_trait_master_edge_mirror_partition_list_){false}
    , decltype(_impl_.grin_trait_mirror_edge_mirror_partition_list_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MirrorPartitionListTrait::~MirrorPartitionListTrait() {
  // @@protoc_insertion_point(destructor:grin.MirrorPartitionListTrait)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MirrorPartitionListTrait::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MirrorPartitionListTrait::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MirrorPartitionListTrait::Clear() {
// @@protoc_insertion_point(message_clear_start:grin.MirrorPartitionListTrait)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.grin_trait_master_vertex_mirror_partition_list_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.grin_trait_mirror_edge_mirror_partition_list_) -
      reinterpret_cast<char*>(&_impl_.grin_trait_master_vertex_mirror_partition_list_)) + sizeof(_impl_.grin_trait_mirror_edge_mirror_partition_list_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MirrorPartitionListTrait::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool grin_trait_master_vertex_mirror_partition_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grin_trait_master_vertex_mirror_partition_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_trait_mirror_vertex_mirror_partition_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.grin_trait_mirror_vertex_mirror_partition_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_trait_master_edge_mirror_partition_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.grin_trait_master_edge_mirror_partition_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_trait_mirror_edge_mirror_partition_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.grin_trait_mirror_edge_mirror_partition_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MirrorPartitionListTrait::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grin.MirrorPartitionListTrait)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool grin_trait_master_vertex_mirror_partition_list = 1;
  if (this->_internal_grin_trait_master_vertex_mirror_partition_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_grin_trait_master_vertex_mirror_partition_list(), target);
  }

  // bool grin_trait_mirror_vertex_mirror_partition_list = 2;
  if (this->_internal_grin_trait_mirror_vertex_mirror_partition_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_grin_trait_mirror_vertex_mirror_partition_list(), target);
  }

  // bool grin_trait_master_edge_mirror_partition_list = 3;
  if (this->_internal_grin_trait_master_edge_mirror_partition_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_grin_trait_master_edge_mirror_partition_list(), target);
  }

  // bool grin_trait_mirror_edge_mirror_partition_list = 4;
  if (this->_internal_grin_trait_mirror_edge_mirror_partition_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_grin_trait_mirror_edge_mirror_partition_list(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grin.MirrorPartitionListTrait)
  return target;
}

size_t MirrorPartitionListTrait::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grin.MirrorPartitionListTrait)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool grin_trait_master_vertex_mirror_partition_list = 1;
  if (this->_internal_grin_trait_master_vertex_mirror_partition_list() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_mirror_vertex_mirror_partition_list = 2;
  if (this->_internal_grin_trait_mirror_vertex_mirror_partition_list() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_master_edge_mirror_partition_list = 3;
  if (this->_internal_grin_trait_master_edge_mirror_partition_list() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_mirror_edge_mirror_partition_list = 4;
  if (this->_internal_grin_trait_mirror_edge_mirror_partition_list() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MirrorPartitionListTrait::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MirrorPartitionListTrait::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MirrorPartitionListTrait::GetClassData() const { return &_class_data_; }


void MirrorPartitionListTrait::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MirrorPartitionListTrait*>(&to_msg);
  auto& from = static_cast<const MirrorPartitionListTrait&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grin.MirrorPartitionListTrait)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_grin_trait_master_vertex_mirror_partition_list() != 0) {
    _this->_internal_set_grin_trait_master_vertex_mirror_partition_list(from._internal_grin_trait_master_vertex_mirror_partition_list());
  }
  if (from._internal_grin_trait_mirror_vertex_mirror_partition_list() != 0) {
    _this->_internal_set_grin_trait_mirror_vertex_mirror_partition_list(from._internal_grin_trait_mirror_vertex_mirror_partition_list());
  }
  if (from._internal_grin_trait_master_edge_mirror_partition_list() != 0) {
    _this->_internal_set_grin_trait_master_edge_mirror_partition_list(from._internal_grin_trait_master_edge_mirror_partition_list());
  }
  if (from._internal_grin_trait_mirror_edge_mirror_partition_list() != 0) {
    _this->_internal_set_grin_trait_mirror_edge_mirror_partition_list(from._internal_grin_trait_mirror_edge_mirror_partition_list());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MirrorPartitionListTrait::CopyFrom(const MirrorPartitionListTrait& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grin.MirrorPartitionListTrait)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MirrorPartitionListTrait::IsInitialized() const {
  return true;
}

void MirrorPartitionListTrait::InternalSwap(MirrorPartitionListTrait* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MirrorPartitionListTrait, _impl_.grin_trait_mirror_edge_mirror_partition_list_)
      + sizeof(MirrorPartitionListTrait::_impl_.grin_trait_mirror_edge_mirror_partition_list_)
      - PROTOBUF_FIELD_OFFSET(MirrorPartitionListTrait, _impl_.grin_trait_master_vertex_mirror_partition_list_)>(
          reinterpret_cast<char*>(&_impl_.grin_trait_master_vertex_mirror_partition_list_),
          reinterpret_cast<char*>(&other->_impl_.grin_trait_master_vertex_mirror_partition_list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MirrorPartitionListTrait::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[1]);
}

// ===================================================================

class PartitionTrait::_Internal {
 public:
  static const ::grin::MirrorPartitionListTrait& mirror_partition_list_trait(const PartitionTrait* msg);
};

const ::grin::MirrorPartitionListTrait&
PartitionTrait::_Internal::mirror_partition_list_trait(const PartitionTrait* msg) {
  return *msg->_impl_.mirror_partition_list_trait_;
}
PartitionTrait::PartitionTrait(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grin.PartitionTrait)
}
PartitionTrait::PartitionTrait(const PartitionTrait& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PartitionTrait* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.mirror_partition_list_trait_){nullptr}
    , decltype(_impl_.graph_partition_strategy_){}
    , decltype(_impl_.grin_trait_natural_id_for_partition_){}
    , decltype(_impl_.grin_enable_vertex_ref_){}
    , decltype(_impl_.grin_enable_edge_ref_){}
    , decltype(_impl_.grin_trait_select_master_for_vertex_list_){}
    , decltype(_impl_.vertex_data_){}
    , decltype(_impl_.edge_data_){}
    , decltype(_impl_.grin_trait_select_partition_for_vertex_list_){}
    , decltype(_impl_.grin_trait_select_master_for_edge_list_){}
    , decltype(_impl_.grin_trait_select_partition_for_edge_list_){}
    , decltype(_impl_.grin_trait_select_master_neighbor_for_adjacent_list_){}
    , decltype(_impl_.grin_trait_select_neighbor_partition_for_adjacent_list_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mirror_partition_list_trait()) {
    _this->_impl_.mirror_partition_list_trait_ = new ::grin::MirrorPartitionListTrait(*from._impl_.mirror_partition_list_trait_);
  }
  ::memcpy(&_impl_.graph_partition_strategy_, &from._impl_.graph_partition_strategy_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.grin_trait_select_neighbor_partition_for_adjacent_list_) -
    reinterpret_cast<char*>(&_impl_.graph_partition_strategy_)) + sizeof(_impl_.grin_trait_select_neighbor_partition_for_adjacent_list_));
  // @@protoc_insertion_point(copy_constructor:grin.PartitionTrait)
}

inline void PartitionTrait::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.mirror_partition_list_trait_){nullptr}
    , decltype(_impl_.graph_partition_strategy_){0}
    , decltype(_impl_.grin_trait_natural_id_for_partition_){false}
    , decltype(_impl_.grin_enable_vertex_ref_){false}
    , decltype(_impl_.grin_enable_edge_ref_){false}
    , decltype(_impl_.grin_trait_select_master_for_vertex_list_){false}
    , decltype(_impl_.vertex_data_){0}
    , decltype(_impl_.edge_data_){0}
    , decltype(_impl_.grin_trait_select_partition_for_vertex_list_){false}
    , decltype(_impl_.grin_trait_select_master_for_edge_list_){false}
    , decltype(_impl_.grin_trait_select_partition_for_edge_list_){false}
    , decltype(_impl_.grin_trait_select_master_neighbor_for_adjacent_list_){false}
    , decltype(_impl_.grin_trait_select_neighbor_partition_for_adjacent_list_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PartitionTrait::~PartitionTrait() {
  // @@protoc_insertion_point(destructor:grin.PartitionTrait)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PartitionTrait::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.mirror_partition_list_trait_;
}

void PartitionTrait::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PartitionTrait::Clear() {
// @@protoc_insertion_point(message_clear_start:grin.PartitionTrait)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.mirror_partition_list_trait_ != nullptr) {
    delete _impl_.mirror_partition_list_trait_;
  }
  _impl_.mirror_partition_list_trait_ = nullptr;
  ::memset(&_impl_.graph_partition_strategy_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.grin_trait_select_neighbor_partition_for_adjacent_list_) -
      reinterpret_cast<char*>(&_impl_.graph_partition_strategy_)) + sizeof(_impl_.grin_trait_select_neighbor_partition_for_adjacent_list_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartitionTrait::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .grin.GraphPartitionStrategy graph_partition_strategy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_graph_partition_strategy(static_cast<::grin::GraphPartitionStrategy>(val));
        } else
          goto handle_unusual;
        continue;
      // bool grin_trait_natural_id_for_partition = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.grin_trait_natural_id_for_partition_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_enable_vertex_ref = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.grin_enable_vertex_ref_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_enable_edge_ref = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.grin_enable_edge_ref_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .grin.PropertyDataPartitionStrategy vertex_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_vertex_data(static_cast<::grin::PropertyDataPartitionStrategy>(val));
        } else
          goto handle_unusual;
        continue;
      // .grin.PropertyDataPartitionStrategy edge_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_edge_data(static_cast<::grin::PropertyDataPartitionStrategy>(val));
        } else
          goto handle_unusual;
        continue;
      // .grin.MirrorPartitionListTrait mirror_partition_list_trait = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_mirror_partition_list_trait(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_trait_select_master_for_vertex_list = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.grin_trait_select_master_for_vertex_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_trait_select_partition_for_vertex_list = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.grin_trait_select_partition_for_vertex_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_trait_select_master_for_edge_list = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.grin_trait_select_master_for_edge_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_trait_select_partition_for_edge_list = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.grin_trait_select_partition_for_edge_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_trait_select_master_neighbor_for_adjacent_list = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.grin_trait_select_master_neighbor_for_adjacent_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_trait_select_neighbor_partition_for_adjacent_list = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.grin_trait_select_neighbor_partition_for_adjacent_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PartitionTrait::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grin.PartitionTrait)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .grin.GraphPartitionStrategy graph_partition_strategy = 1;
  if (this->_internal_graph_partition_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_graph_partition_strategy(), target);
  }

  // bool grin_trait_natural_id_for_partition = 2;
  if (this->_internal_grin_trait_natural_id_for_partition() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_grin_trait_natural_id_for_partition(), target);
  }

  // bool grin_enable_vertex_ref = 3;
  if (this->_internal_grin_enable_vertex_ref() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_grin_enable_vertex_ref(), target);
  }

  // bool grin_enable_edge_ref = 4;
  if (this->_internal_grin_enable_edge_ref() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_grin_enable_edge_ref(), target);
  }

  // .grin.PropertyDataPartitionStrategy vertex_data = 5;
  if (this->_internal_vertex_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_vertex_data(), target);
  }

  // .grin.PropertyDataPartitionStrategy edge_data = 6;
  if (this->_internal_edge_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_edge_data(), target);
  }

  // .grin.MirrorPartitionListTrait mirror_partition_list_trait = 7;
  if (this->_internal_has_mirror_partition_list_trait()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::mirror_partition_list_trait(this),
        _Internal::mirror_partition_list_trait(this).GetCachedSize(), target, stream);
  }

  // bool grin_trait_select_master_for_vertex_list = 8;
  if (this->_internal_grin_trait_select_master_for_vertex_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_grin_trait_select_master_for_vertex_list(), target);
  }

  // bool grin_trait_select_partition_for_vertex_list = 9;
  if (this->_internal_grin_trait_select_partition_for_vertex_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_grin_trait_select_partition_for_vertex_list(), target);
  }

  // bool grin_trait_select_master_for_edge_list = 10;
  if (this->_internal_grin_trait_select_master_for_edge_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_grin_trait_select_master_for_edge_list(), target);
  }

  // bool grin_trait_select_partition_for_edge_list = 11;
  if (this->_internal_grin_trait_select_partition_for_edge_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_grin_trait_select_partition_for_edge_list(), target);
  }

  // bool grin_trait_select_master_neighbor_for_adjacent_list = 12;
  if (this->_internal_grin_trait_select_master_neighbor_for_adjacent_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_grin_trait_select_master_neighbor_for_adjacent_list(), target);
  }

  // bool grin_trait_select_neighbor_partition_for_adjacent_list = 13;
  if (this->_internal_grin_trait_select_neighbor_partition_for_adjacent_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(13, this->_internal_grin_trait_select_neighbor_partition_for_adjacent_list(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grin.PartitionTrait)
  return target;
}

size_t PartitionTrait::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grin.PartitionTrait)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .grin.MirrorPartitionListTrait mirror_partition_list_trait = 7;
  if (this->_internal_has_mirror_partition_list_trait()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mirror_partition_list_trait_);
  }

  // .grin.GraphPartitionStrategy graph_partition_strategy = 1;
  if (this->_internal_graph_partition_strategy() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_graph_partition_strategy());
  }

  // bool grin_trait_natural_id_for_partition = 2;
  if (this->_internal_grin_trait_natural_id_for_partition() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_enable_vertex_ref = 3;
  if (this->_internal_grin_enable_vertex_ref() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_enable_edge_ref = 4;
  if (this->_internal_grin_enable_edge_ref() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_select_master_for_vertex_list = 8;
  if (this->_internal_grin_trait_select_master_for_vertex_list() != 0) {
    total_size += 1 + 1;
  }

  // .grin.PropertyDataPartitionStrategy vertex_data = 5;
  if (this->_internal_vertex_data() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_vertex_data());
  }

  // .grin.PropertyDataPartitionStrategy edge_data = 6;
  if (this->_internal_edge_data() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_edge_data());
  }

  // bool grin_trait_select_partition_for_vertex_list = 9;
  if (this->_internal_grin_trait_select_partition_for_vertex_list() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_select_master_for_edge_list = 10;
  if (this->_internal_grin_trait_select_master_for_edge_list() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_select_partition_for_edge_list = 11;
  if (this->_internal_grin_trait_select_partition_for_edge_list() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_select_master_neighbor_for_adjacent_list = 12;
  if (this->_internal_grin_trait_select_master_neighbor_for_adjacent_list() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_select_neighbor_partition_for_adjacent_list = 13;
  if (this->_internal_grin_trait_select_neighbor_partition_for_adjacent_list() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PartitionTrait::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PartitionTrait::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PartitionTrait::GetClassData() const { return &_class_data_; }


void PartitionTrait::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PartitionTrait*>(&to_msg);
  auto& from = static_cast<const PartitionTrait&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grin.PartitionTrait)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_mirror_partition_list_trait()) {
    _this->_internal_mutable_mirror_partition_list_trait()->::grin::MirrorPartitionListTrait::MergeFrom(
        from._internal_mirror_partition_list_trait());
  }
  if (from._internal_graph_partition_strategy() != 0) {
    _this->_internal_set_graph_partition_strategy(from._internal_graph_partition_strategy());
  }
  if (from._internal_grin_trait_natural_id_for_partition() != 0) {
    _this->_internal_set_grin_trait_natural_id_for_partition(from._internal_grin_trait_natural_id_for_partition());
  }
  if (from._internal_grin_enable_vertex_ref() != 0) {
    _this->_internal_set_grin_enable_vertex_ref(from._internal_grin_enable_vertex_ref());
  }
  if (from._internal_grin_enable_edge_ref() != 0) {
    _this->_internal_set_grin_enable_edge_ref(from._internal_grin_enable_edge_ref());
  }
  if (from._internal_grin_trait_select_master_for_vertex_list() != 0) {
    _this->_internal_set_grin_trait_select_master_for_vertex_list(from._internal_grin_trait_select_master_for_vertex_list());
  }
  if (from._internal_vertex_data() != 0) {
    _this->_internal_set_vertex_data(from._internal_vertex_data());
  }
  if (from._internal_edge_data() != 0) {
    _this->_internal_set_edge_data(from._internal_edge_data());
  }
  if (from._internal_grin_trait_select_partition_for_vertex_list() != 0) {
    _this->_internal_set_grin_trait_select_partition_for_vertex_list(from._internal_grin_trait_select_partition_for_vertex_list());
  }
  if (from._internal_grin_trait_select_master_for_edge_list() != 0) {
    _this->_internal_set_grin_trait_select_master_for_edge_list(from._internal_grin_trait_select_master_for_edge_list());
  }
  if (from._internal_grin_trait_select_partition_for_edge_list() != 0) {
    _this->_internal_set_grin_trait_select_partition_for_edge_list(from._internal_grin_trait_select_partition_for_edge_list());
  }
  if (from._internal_grin_trait_select_master_neighbor_for_adjacent_list() != 0) {
    _this->_internal_set_grin_trait_select_master_neighbor_for_adjacent_list(from._internal_grin_trait_select_master_neighbor_for_adjacent_list());
  }
  if (from._internal_grin_trait_select_neighbor_partition_for_adjacent_list() != 0) {
    _this->_internal_set_grin_trait_select_neighbor_partition_for_adjacent_list(from._internal_grin_trait_select_neighbor_partition_for_adjacent_list());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PartitionTrait::CopyFrom(const PartitionTrait& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grin.PartitionTrait)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartitionTrait::IsInitialized() const {
  return true;
}

void PartitionTrait::InternalSwap(PartitionTrait* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PartitionTrait, _impl_.grin_trait_select_neighbor_partition_for_adjacent_list_)
      + sizeof(PartitionTrait::_impl_.grin_trait_select_neighbor_partition_for_adjacent_list_)
      - PROTOBUF_FIELD_OFFSET(PartitionTrait, _impl_.mirror_partition_list_trait_)>(
          reinterpret_cast<char*>(&_impl_.mirror_partition_list_trait_),
          reinterpret_cast<char*>(&other->_impl_.mirror_partition_list_trait_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PartitionTrait::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[2]);
}

// ===================================================================

class VertexPropertyTrait::_Internal {
 public:
};

VertexPropertyTrait::VertexPropertyTrait(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grin.VertexPropertyTrait)
}
VertexPropertyTrait::VertexPropertyTrait(const VertexPropertyTrait& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VertexPropertyTrait* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.grin_with_vertex_property_){}
    , decltype(_impl_.grin_with_vertex_property_name_){}
    , decltype(_impl_.grin_with_vertex_type_name_){}
    , decltype(_impl_.grin_enable_vertex_property_table_){}
    , decltype(_impl_.grin_enable_vertex_primary_keys_){}
    , decltype(_impl_.grin_trait_natural_id_for_vertex_type_){}
    , decltype(_impl_.grin_trait_natural_id_for_vertex_property_){}
    , decltype(_impl_.grin_assume_by_type_vertex_original_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.grin_with_vertex_property_, &from._impl_.grin_with_vertex_property_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.grin_assume_by_type_vertex_original_id_) -
    reinterpret_cast<char*>(&_impl_.grin_with_vertex_property_)) + sizeof(_impl_.grin_assume_by_type_vertex_original_id_));
  // @@protoc_insertion_point(copy_constructor:grin.VertexPropertyTrait)
}

inline void VertexPropertyTrait::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.grin_with_vertex_property_){false}
    , decltype(_impl_.grin_with_vertex_property_name_){false}
    , decltype(_impl_.grin_with_vertex_type_name_){false}
    , decltype(_impl_.grin_enable_vertex_property_table_){false}
    , decltype(_impl_.grin_enable_vertex_primary_keys_){false}
    , decltype(_impl_.grin_trait_natural_id_for_vertex_type_){false}
    , decltype(_impl_.grin_trait_natural_id_for_vertex_property_){false}
    , decltype(_impl_.grin_assume_by_type_vertex_original_id_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VertexPropertyTrait::~VertexPropertyTrait() {
  // @@protoc_insertion_point(destructor:grin.VertexPropertyTrait)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VertexPropertyTrait::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VertexPropertyTrait::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VertexPropertyTrait::Clear() {
// @@protoc_insertion_point(message_clear_start:grin.VertexPropertyTrait)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.grin_with_vertex_property_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.grin_assume_by_type_vertex_original_id_) -
      reinterpret_cast<char*>(&_impl_.grin_with_vertex_property_)) + sizeof(_impl_.grin_assume_by_type_vertex_original_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VertexPropertyTrait::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool grin_with_vertex_property = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grin_with_vertex_property_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_with_vertex_property_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.grin_with_vertex_property_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_with_vertex_type_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.grin_with_vertex_type_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_enable_vertex_property_table = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.grin_enable_vertex_property_table_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_enable_vertex_primary_keys = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.grin_enable_vertex_primary_keys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_trait_natural_id_for_vertex_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.grin_trait_natural_id_for_vertex_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_trait_natural_id_for_vertex_property = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.grin_trait_natural_id_for_vertex_property_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_assume_by_type_vertex_original_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.grin_assume_by_type_vertex_original_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VertexPropertyTrait::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grin.VertexPropertyTrait)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool grin_with_vertex_property = 1;
  if (this->_internal_grin_with_vertex_property() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_grin_with_vertex_property(), target);
  }

  // bool grin_with_vertex_property_name = 2;
  if (this->_internal_grin_with_vertex_property_name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_grin_with_vertex_property_name(), target);
  }

  // bool grin_with_vertex_type_name = 3;
  if (this->_internal_grin_with_vertex_type_name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_grin_with_vertex_type_name(), target);
  }

  // bool grin_enable_vertex_property_table = 4;
  if (this->_internal_grin_enable_vertex_property_table() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_grin_enable_vertex_property_table(), target);
  }

  // bool grin_enable_vertex_primary_keys = 5;
  if (this->_internal_grin_enable_vertex_primary_keys() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_grin_enable_vertex_primary_keys(), target);
  }

  // bool grin_trait_natural_id_for_vertex_type = 6;
  if (this->_internal_grin_trait_natural_id_for_vertex_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_grin_trait_natural_id_for_vertex_type(), target);
  }

  // bool grin_trait_natural_id_for_vertex_property = 7;
  if (this->_internal_grin_trait_natural_id_for_vertex_property() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_grin_trait_natural_id_for_vertex_property(), target);
  }

  // bool grin_assume_by_type_vertex_original_id = 8;
  if (this->_internal_grin_assume_by_type_vertex_original_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_grin_assume_by_type_vertex_original_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grin.VertexPropertyTrait)
  return target;
}

size_t VertexPropertyTrait::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grin.VertexPropertyTrait)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool grin_with_vertex_property = 1;
  if (this->_internal_grin_with_vertex_property() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_with_vertex_property_name = 2;
  if (this->_internal_grin_with_vertex_property_name() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_with_vertex_type_name = 3;
  if (this->_internal_grin_with_vertex_type_name() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_enable_vertex_property_table = 4;
  if (this->_internal_grin_enable_vertex_property_table() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_enable_vertex_primary_keys = 5;
  if (this->_internal_grin_enable_vertex_primary_keys() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_natural_id_for_vertex_type = 6;
  if (this->_internal_grin_trait_natural_id_for_vertex_type() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_natural_id_for_vertex_property = 7;
  if (this->_internal_grin_trait_natural_id_for_vertex_property() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_assume_by_type_vertex_original_id = 8;
  if (this->_internal_grin_assume_by_type_vertex_original_id() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VertexPropertyTrait::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VertexPropertyTrait::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VertexPropertyTrait::GetClassData() const { return &_class_data_; }


void VertexPropertyTrait::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VertexPropertyTrait*>(&to_msg);
  auto& from = static_cast<const VertexPropertyTrait&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grin.VertexPropertyTrait)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_grin_with_vertex_property() != 0) {
    _this->_internal_set_grin_with_vertex_property(from._internal_grin_with_vertex_property());
  }
  if (from._internal_grin_with_vertex_property_name() != 0) {
    _this->_internal_set_grin_with_vertex_property_name(from._internal_grin_with_vertex_property_name());
  }
  if (from._internal_grin_with_vertex_type_name() != 0) {
    _this->_internal_set_grin_with_vertex_type_name(from._internal_grin_with_vertex_type_name());
  }
  if (from._internal_grin_enable_vertex_property_table() != 0) {
    _this->_internal_set_grin_enable_vertex_property_table(from._internal_grin_enable_vertex_property_table());
  }
  if (from._internal_grin_enable_vertex_primary_keys() != 0) {
    _this->_internal_set_grin_enable_vertex_primary_keys(from._internal_grin_enable_vertex_primary_keys());
  }
  if (from._internal_grin_trait_natural_id_for_vertex_type() != 0) {
    _this->_internal_set_grin_trait_natural_id_for_vertex_type(from._internal_grin_trait_natural_id_for_vertex_type());
  }
  if (from._internal_grin_trait_natural_id_for_vertex_property() != 0) {
    _this->_internal_set_grin_trait_natural_id_for_vertex_property(from._internal_grin_trait_natural_id_for_vertex_property());
  }
  if (from._internal_grin_assume_by_type_vertex_original_id() != 0) {
    _this->_internal_set_grin_assume_by_type_vertex_original_id(from._internal_grin_assume_by_type_vertex_original_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VertexPropertyTrait::CopyFrom(const VertexPropertyTrait& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grin.VertexPropertyTrait)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VertexPropertyTrait::IsInitialized() const {
  return true;
}

void VertexPropertyTrait::InternalSwap(VertexPropertyTrait* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VertexPropertyTrait, _impl_.grin_assume_by_type_vertex_original_id_)
      + sizeof(VertexPropertyTrait::_impl_.grin_assume_by_type_vertex_original_id_)
      - PROTOBUF_FIELD_OFFSET(VertexPropertyTrait, _impl_.grin_with_vertex_property_)>(
          reinterpret_cast<char*>(&_impl_.grin_with_vertex_property_),
          reinterpret_cast<char*>(&other->_impl_.grin_with_vertex_property_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VertexPropertyTrait::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[3]);
}

// ===================================================================

class EdgePropertyTrait::_Internal {
 public:
};

EdgePropertyTrait::EdgePropertyTrait(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grin.EdgePropertyTrait)
}
EdgePropertyTrait::EdgePropertyTrait(const EdgePropertyTrait& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EdgePropertyTrait* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.grin_with_edge_property_){}
    , decltype(_impl_.grin_with_edge_property_name_){}
    , decltype(_impl_.grin_with_edge_type_name_){}
    , decltype(_impl_.grin_enable_edge_property_table_){}
    , decltype(_impl_.grin_enable_edge_primary_keys_){}
    , decltype(_impl_.grin_trait_natural_id_for_edge_type_){}
    , decltype(_impl_.grin_trait_natural_id_for_edge_property_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.grin_with_edge_property_, &from._impl_.grin_with_edge_property_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.grin_trait_natural_id_for_edge_property_) -
    reinterpret_cast<char*>(&_impl_.grin_with_edge_property_)) + sizeof(_impl_.grin_trait_natural_id_for_edge_property_));
  // @@protoc_insertion_point(copy_constructor:grin.EdgePropertyTrait)
}

inline void EdgePropertyTrait::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.grin_with_edge_property_){false}
    , decltype(_impl_.grin_with_edge_property_name_){false}
    , decltype(_impl_.grin_with_edge_type_name_){false}
    , decltype(_impl_.grin_enable_edge_property_table_){false}
    , decltype(_impl_.grin_enable_edge_primary_keys_){false}
    , decltype(_impl_.grin_trait_natural_id_for_edge_type_){false}
    , decltype(_impl_.grin_trait_natural_id_for_edge_property_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EdgePropertyTrait::~EdgePropertyTrait() {
  // @@protoc_insertion_point(destructor:grin.EdgePropertyTrait)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EdgePropertyTrait::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EdgePropertyTrait::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EdgePropertyTrait::Clear() {
// @@protoc_insertion_point(message_clear_start:grin.EdgePropertyTrait)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.grin_with_edge_property_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.grin_trait_natural_id_for_edge_property_) -
      reinterpret_cast<char*>(&_impl_.grin_with_edge_property_)) + sizeof(_impl_.grin_trait_natural_id_for_edge_property_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EdgePropertyTrait::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool grin_with_edge_property = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grin_with_edge_property_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_with_edge_property_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.grin_with_edge_property_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_with_edge_type_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.grin_with_edge_type_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_enable_edge_property_table = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.grin_enable_edge_property_table_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_enable_edge_primary_keys = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.grin_enable_edge_primary_keys_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_trait_natural_id_for_edge_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.grin_trait_natural_id_for_edge_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_trait_natural_id_for_edge_property = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.grin_trait_natural_id_for_edge_property_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EdgePropertyTrait::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grin.EdgePropertyTrait)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool grin_with_edge_property = 1;
  if (this->_internal_grin_with_edge_property() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_grin_with_edge_property(), target);
  }

  // bool grin_with_edge_property_name = 2;
  if (this->_internal_grin_with_edge_property_name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_grin_with_edge_property_name(), target);
  }

  // bool grin_with_edge_type_name = 3;
  if (this->_internal_grin_with_edge_type_name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_grin_with_edge_type_name(), target);
  }

  // bool grin_enable_edge_property_table = 4;
  if (this->_internal_grin_enable_edge_property_table() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_grin_enable_edge_property_table(), target);
  }

  // bool grin_enable_edge_primary_keys = 5;
  if (this->_internal_grin_enable_edge_primary_keys() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_grin_enable_edge_primary_keys(), target);
  }

  // bool grin_trait_natural_id_for_edge_type = 6;
  if (this->_internal_grin_trait_natural_id_for_edge_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_grin_trait_natural_id_for_edge_type(), target);
  }

  // bool grin_trait_natural_id_for_edge_property = 7;
  if (this->_internal_grin_trait_natural_id_for_edge_property() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_grin_trait_natural_id_for_edge_property(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grin.EdgePropertyTrait)
  return target;
}

size_t EdgePropertyTrait::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grin.EdgePropertyTrait)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool grin_with_edge_property = 1;
  if (this->_internal_grin_with_edge_property() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_with_edge_property_name = 2;
  if (this->_internal_grin_with_edge_property_name() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_with_edge_type_name = 3;
  if (this->_internal_grin_with_edge_type_name() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_enable_edge_property_table = 4;
  if (this->_internal_grin_enable_edge_property_table() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_enable_edge_primary_keys = 5;
  if (this->_internal_grin_enable_edge_primary_keys() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_natural_id_for_edge_type = 6;
  if (this->_internal_grin_trait_natural_id_for_edge_type() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_natural_id_for_edge_property = 7;
  if (this->_internal_grin_trait_natural_id_for_edge_property() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EdgePropertyTrait::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EdgePropertyTrait::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EdgePropertyTrait::GetClassData() const { return &_class_data_; }


void EdgePropertyTrait::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EdgePropertyTrait*>(&to_msg);
  auto& from = static_cast<const EdgePropertyTrait&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grin.EdgePropertyTrait)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_grin_with_edge_property() != 0) {
    _this->_internal_set_grin_with_edge_property(from._internal_grin_with_edge_property());
  }
  if (from._internal_grin_with_edge_property_name() != 0) {
    _this->_internal_set_grin_with_edge_property_name(from._internal_grin_with_edge_property_name());
  }
  if (from._internal_grin_with_edge_type_name() != 0) {
    _this->_internal_set_grin_with_edge_type_name(from._internal_grin_with_edge_type_name());
  }
  if (from._internal_grin_enable_edge_property_table() != 0) {
    _this->_internal_set_grin_enable_edge_property_table(from._internal_grin_enable_edge_property_table());
  }
  if (from._internal_grin_enable_edge_primary_keys() != 0) {
    _this->_internal_set_grin_enable_edge_primary_keys(from._internal_grin_enable_edge_primary_keys());
  }
  if (from._internal_grin_trait_natural_id_for_edge_type() != 0) {
    _this->_internal_set_grin_trait_natural_id_for_edge_type(from._internal_grin_trait_natural_id_for_edge_type());
  }
  if (from._internal_grin_trait_natural_id_for_edge_property() != 0) {
    _this->_internal_set_grin_trait_natural_id_for_edge_property(from._internal_grin_trait_natural_id_for_edge_property());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EdgePropertyTrait::CopyFrom(const EdgePropertyTrait& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grin.EdgePropertyTrait)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgePropertyTrait::IsInitialized() const {
  return true;
}

void EdgePropertyTrait::InternalSwap(EdgePropertyTrait* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EdgePropertyTrait, _impl_.grin_trait_natural_id_for_edge_property_)
      + sizeof(EdgePropertyTrait::_impl_.grin_trait_natural_id_for_edge_property_)
      - PROTOBUF_FIELD_OFFSET(EdgePropertyTrait, _impl_.grin_with_edge_property_)>(
          reinterpret_cast<char*>(&_impl_.grin_with_edge_property_),
          reinterpret_cast<char*>(&other->_impl_.grin_with_edge_property_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EdgePropertyTrait::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[4]);
}

// ===================================================================

class PropertyTrait::_Internal {
 public:
  static const ::grin::VertexPropertyTrait& vertex_property_trait(const PropertyTrait* msg);
  static const ::grin::EdgePropertyTrait& edge_property_trait(const PropertyTrait* msg);
};

const ::grin::VertexPropertyTrait&
PropertyTrait::_Internal::vertex_property_trait(const PropertyTrait* msg) {
  return *msg->_impl_.vertex_property_trait_;
}
const ::grin::EdgePropertyTrait&
PropertyTrait::_Internal::edge_property_trait(const PropertyTrait* msg) {
  return *msg->_impl_.edge_property_trait_;
}
PropertyTrait::PropertyTrait(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grin.PropertyTrait)
}
PropertyTrait::PropertyTrait(const PropertyTrait& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PropertyTrait* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vertex_property_trait_){nullptr}
    , decltype(_impl_.edge_property_trait_){nullptr}
    , decltype(_impl_.vertex_property_){}
    , decltype(_impl_.edge_property_){}
    , decltype(_impl_.grin_enable_row_){}
    , decltype(_impl_.grin_assume_column_store_for_vertex_property_){}
    , decltype(_impl_.grin_assume_column_store_for_edge_property_){}
    , decltype(_impl_.grin_trait_select_type_for_vertex_list_){}
    , decltype(_impl_.grin_trait_select_type_for_edge_list_){}
    , decltype(_impl_.grin_trait_select_neighbor_type_for_adjacent_list_){}
    , decltype(_impl_.grin_trait_select_edge_type_for_adjacent_list_){}
    , decltype(_impl_.grin_trait_specific_vev_relation_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_vertex_property_trait()) {
    _this->_impl_.vertex_property_trait_ = new ::grin::VertexPropertyTrait(*from._impl_.vertex_property_trait_);
  }
  if (from._internal_has_edge_property_trait()) {
    _this->_impl_.edge_property_trait_ = new ::grin::EdgePropertyTrait(*from._impl_.edge_property_trait_);
  }
  ::memcpy(&_impl_.vertex_property_, &from._impl_.vertex_property_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.grin_trait_specific_vev_relation_) -
    reinterpret_cast<char*>(&_impl_.vertex_property_)) + sizeof(_impl_.grin_trait_specific_vev_relation_));
  // @@protoc_insertion_point(copy_constructor:grin.PropertyTrait)
}

inline void PropertyTrait::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vertex_property_trait_){nullptr}
    , decltype(_impl_.edge_property_trait_){nullptr}
    , decltype(_impl_.vertex_property_){0}
    , decltype(_impl_.edge_property_){0}
    , decltype(_impl_.grin_enable_row_){false}
    , decltype(_impl_.grin_assume_column_store_for_vertex_property_){false}
    , decltype(_impl_.grin_assume_column_store_for_edge_property_){false}
    , decltype(_impl_.grin_trait_select_type_for_vertex_list_){false}
    , decltype(_impl_.grin_trait_select_type_for_edge_list_){false}
    , decltype(_impl_.grin_trait_select_neighbor_type_for_adjacent_list_){false}
    , decltype(_impl_.grin_trait_select_edge_type_for_adjacent_list_){false}
    , decltype(_impl_.grin_trait_specific_vev_relation_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PropertyTrait::~PropertyTrait() {
  // @@protoc_insertion_point(destructor:grin.PropertyTrait)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PropertyTrait::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.vertex_property_trait_;
  if (this != internal_default_instance()) delete _impl_.edge_property_trait_;
}

void PropertyTrait::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PropertyTrait::Clear() {
// @@protoc_insertion_point(message_clear_start:grin.PropertyTrait)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.vertex_property_trait_ != nullptr) {
    delete _impl_.vertex_property_trait_;
  }
  _impl_.vertex_property_trait_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.edge_property_trait_ != nullptr) {
    delete _impl_.edge_property_trait_;
  }
  _impl_.edge_property_trait_ = nullptr;
  ::memset(&_impl_.vertex_property_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.grin_trait_specific_vev_relation_) -
      reinterpret_cast<char*>(&_impl_.vertex_property_)) + sizeof(_impl_.grin_trait_specific_vev_relation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropertyTrait::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool grin_enable_row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grin_enable_row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .grin.VertexPropertyTrait vertex_property_trait = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vertex_property_trait(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .grin.EdgePropertyTrait edge_property_trait = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_edge_property_trait(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .grin.PropertyDataPartitionStrategy vertex_property = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_vertex_property(static_cast<::grin::PropertyDataPartitionStrategy>(val));
        } else
          goto handle_unusual;
        continue;
      // .grin.PropertyDataPartitionStrategy edge_property = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_edge_property(static_cast<::grin::PropertyDataPartitionStrategy>(val));
        } else
          goto handle_unusual;
        continue;
      // bool grin_assume_column_store_for_vertex_property = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.grin_assume_column_store_for_vertex_property_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_assume_column_store_for_edge_property = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.grin_assume_column_store_for_edge_property_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_trait_select_type_for_vertex_list = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.grin_trait_select_type_for_vertex_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_trait_select_type_for_edge_list = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.grin_trait_select_type_for_edge_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_trait_select_neighbor_type_for_adjacent_list = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.grin_trait_select_neighbor_type_for_adjacent_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_trait_select_edge_type_for_adjacent_list = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.grin_trait_select_edge_type_for_adjacent_list_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_trait_specific_vev_relation = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.grin_trait_specific_vev_relation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PropertyTrait::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grin.PropertyTrait)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool grin_enable_row = 1;
  if (this->_internal_grin_enable_row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_grin_enable_row(), target);
  }

  // .grin.VertexPropertyTrait vertex_property_trait = 2;
  if (this->_internal_has_vertex_property_trait()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::vertex_property_trait(this),
        _Internal::vertex_property_trait(this).GetCachedSize(), target, stream);
  }

  // .grin.EdgePropertyTrait edge_property_trait = 3;
  if (this->_internal_has_edge_property_trait()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::edge_property_trait(this),
        _Internal::edge_property_trait(this).GetCachedSize(), target, stream);
  }

  // .grin.PropertyDataPartitionStrategy vertex_property = 4;
  if (this->_internal_vertex_property() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_vertex_property(), target);
  }

  // .grin.PropertyDataPartitionStrategy edge_property = 5;
  if (this->_internal_edge_property() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_edge_property(), target);
  }

  // bool grin_assume_column_store_for_vertex_property = 6;
  if (this->_internal_grin_assume_column_store_for_vertex_property() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_grin_assume_column_store_for_vertex_property(), target);
  }

  // bool grin_assume_column_store_for_edge_property = 7;
  if (this->_internal_grin_assume_column_store_for_edge_property() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_grin_assume_column_store_for_edge_property(), target);
  }

  // bool grin_trait_select_type_for_vertex_list = 8;
  if (this->_internal_grin_trait_select_type_for_vertex_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_grin_trait_select_type_for_vertex_list(), target);
  }

  // bool grin_trait_select_type_for_edge_list = 9;
  if (this->_internal_grin_trait_select_type_for_edge_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_grin_trait_select_type_for_edge_list(), target);
  }

  // bool grin_trait_select_neighbor_type_for_adjacent_list = 10;
  if (this->_internal_grin_trait_select_neighbor_type_for_adjacent_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_grin_trait_select_neighbor_type_for_adjacent_list(), target);
  }

  // bool grin_trait_select_edge_type_for_adjacent_list = 11;
  if (this->_internal_grin_trait_select_edge_type_for_adjacent_list() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_grin_trait_select_edge_type_for_adjacent_list(), target);
  }

  // bool grin_trait_specific_vev_relation = 12;
  if (this->_internal_grin_trait_specific_vev_relation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_grin_trait_specific_vev_relation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grin.PropertyTrait)
  return target;
}

size_t PropertyTrait::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grin.PropertyTrait)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .grin.VertexPropertyTrait vertex_property_trait = 2;
  if (this->_internal_has_vertex_property_trait()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vertex_property_trait_);
  }

  // .grin.EdgePropertyTrait edge_property_trait = 3;
  if (this->_internal_has_edge_property_trait()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.edge_property_trait_);
  }

  // .grin.PropertyDataPartitionStrategy vertex_property = 4;
  if (this->_internal_vertex_property() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_vertex_property());
  }

  // .grin.PropertyDataPartitionStrategy edge_property = 5;
  if (this->_internal_edge_property() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_edge_property());
  }

  // bool grin_enable_row = 1;
  if (this->_internal_grin_enable_row() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_assume_column_store_for_vertex_property = 6;
  if (this->_internal_grin_assume_column_store_for_vertex_property() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_assume_column_store_for_edge_property = 7;
  if (this->_internal_grin_assume_column_store_for_edge_property() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_select_type_for_vertex_list = 8;
  if (this->_internal_grin_trait_select_type_for_vertex_list() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_select_type_for_edge_list = 9;
  if (this->_internal_grin_trait_select_type_for_edge_list() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_select_neighbor_type_for_adjacent_list = 10;
  if (this->_internal_grin_trait_select_neighbor_type_for_adjacent_list() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_select_edge_type_for_adjacent_list = 11;
  if (this->_internal_grin_trait_select_edge_type_for_adjacent_list() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_trait_specific_vev_relation = 12;
  if (this->_internal_grin_trait_specific_vev_relation() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PropertyTrait::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PropertyTrait::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PropertyTrait::GetClassData() const { return &_class_data_; }


void PropertyTrait::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PropertyTrait*>(&to_msg);
  auto& from = static_cast<const PropertyTrait&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grin.PropertyTrait)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_vertex_property_trait()) {
    _this->_internal_mutable_vertex_property_trait()->::grin::VertexPropertyTrait::MergeFrom(
        from._internal_vertex_property_trait());
  }
  if (from._internal_has_edge_property_trait()) {
    _this->_internal_mutable_edge_property_trait()->::grin::EdgePropertyTrait::MergeFrom(
        from._internal_edge_property_trait());
  }
  if (from._internal_vertex_property() != 0) {
    _this->_internal_set_vertex_property(from._internal_vertex_property());
  }
  if (from._internal_edge_property() != 0) {
    _this->_internal_set_edge_property(from._internal_edge_property());
  }
  if (from._internal_grin_enable_row() != 0) {
    _this->_internal_set_grin_enable_row(from._internal_grin_enable_row());
  }
  if (from._internal_grin_assume_column_store_for_vertex_property() != 0) {
    _this->_internal_set_grin_assume_column_store_for_vertex_property(from._internal_grin_assume_column_store_for_vertex_property());
  }
  if (from._internal_grin_assume_column_store_for_edge_property() != 0) {
    _this->_internal_set_grin_assume_column_store_for_edge_property(from._internal_grin_assume_column_store_for_edge_property());
  }
  if (from._internal_grin_trait_select_type_for_vertex_list() != 0) {
    _this->_internal_set_grin_trait_select_type_for_vertex_list(from._internal_grin_trait_select_type_for_vertex_list());
  }
  if (from._internal_grin_trait_select_type_for_edge_list() != 0) {
    _this->_internal_set_grin_trait_select_type_for_edge_list(from._internal_grin_trait_select_type_for_edge_list());
  }
  if (from._internal_grin_trait_select_neighbor_type_for_adjacent_list() != 0) {
    _this->_internal_set_grin_trait_select_neighbor_type_for_adjacent_list(from._internal_grin_trait_select_neighbor_type_for_adjacent_list());
  }
  if (from._internal_grin_trait_select_edge_type_for_adjacent_list() != 0) {
    _this->_internal_set_grin_trait_select_edge_type_for_adjacent_list(from._internal_grin_trait_select_edge_type_for_adjacent_list());
  }
  if (from._internal_grin_trait_specific_vev_relation() != 0) {
    _this->_internal_set_grin_trait_specific_vev_relation(from._internal_grin_trait_specific_vev_relation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PropertyTrait::CopyFrom(const PropertyTrait& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grin.PropertyTrait)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyTrait::IsInitialized() const {
  return true;
}

void PropertyTrait::InternalSwap(PropertyTrait* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PropertyTrait, _impl_.grin_trait_specific_vev_relation_)
      + sizeof(PropertyTrait::_impl_.grin_trait_specific_vev_relation_)
      - PROTOBUF_FIELD_OFFSET(PropertyTrait, _impl_.vertex_property_trait_)>(
          reinterpret_cast<char*>(&_impl_.vertex_property_trait_),
          reinterpret_cast<char*>(&other->_impl_.vertex_property_trait_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PropertyTrait::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[5]);
}

// ===================================================================

class IndexTrait::_Internal {
 public:
};

IndexTrait::IndexTrait(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grin.IndexTrait)
}
IndexTrait::IndexTrait(const IndexTrait& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IndexTrait* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.grin_with_vertex_label_){}
    , decltype(_impl_.grin_with_edge_label_){}
    , decltype(_impl_.grin_assume_all_vertex_list_sorted_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.grin_with_vertex_label_, &from._impl_.grin_with_vertex_label_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.grin_assume_all_vertex_list_sorted_) -
    reinterpret_cast<char*>(&_impl_.grin_with_vertex_label_)) + sizeof(_impl_.grin_assume_all_vertex_list_sorted_));
  // @@protoc_insertion_point(copy_constructor:grin.IndexTrait)
}

inline void IndexTrait::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.grin_with_vertex_label_){false}
    , decltype(_impl_.grin_with_edge_label_){false}
    , decltype(_impl_.grin_assume_all_vertex_list_sorted_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IndexTrait::~IndexTrait() {
  // @@protoc_insertion_point(destructor:grin.IndexTrait)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IndexTrait::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IndexTrait::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IndexTrait::Clear() {
// @@protoc_insertion_point(message_clear_start:grin.IndexTrait)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.grin_with_vertex_label_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.grin_assume_all_vertex_list_sorted_) -
      reinterpret_cast<char*>(&_impl_.grin_with_vertex_label_)) + sizeof(_impl_.grin_assume_all_vertex_list_sorted_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndexTrait::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool grin_with_vertex_label = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.grin_with_vertex_label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_with_edge_label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.grin_with_edge_label_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool grin_assume_all_vertex_list_sorted = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.grin_assume_all_vertex_list_sorted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IndexTrait::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grin.IndexTrait)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool grin_with_vertex_label = 1;
  if (this->_internal_grin_with_vertex_label() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_grin_with_vertex_label(), target);
  }

  // bool grin_with_edge_label = 2;
  if (this->_internal_grin_with_edge_label() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_grin_with_edge_label(), target);
  }

  // bool grin_assume_all_vertex_list_sorted = 3;
  if (this->_internal_grin_assume_all_vertex_list_sorted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_grin_assume_all_vertex_list_sorted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grin.IndexTrait)
  return target;
}

size_t IndexTrait::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grin.IndexTrait)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool grin_with_vertex_label = 1;
  if (this->_internal_grin_with_vertex_label() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_with_edge_label = 2;
  if (this->_internal_grin_with_edge_label() != 0) {
    total_size += 1 + 1;
  }

  // bool grin_assume_all_vertex_list_sorted = 3;
  if (this->_internal_grin_assume_all_vertex_list_sorted() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndexTrait::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IndexTrait::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndexTrait::GetClassData() const { return &_class_data_; }


void IndexTrait::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IndexTrait*>(&to_msg);
  auto& from = static_cast<const IndexTrait&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grin.IndexTrait)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_grin_with_vertex_label() != 0) {
    _this->_internal_set_grin_with_vertex_label(from._internal_grin_with_vertex_label());
  }
  if (from._internal_grin_with_edge_label() != 0) {
    _this->_internal_set_grin_with_edge_label(from._internal_grin_with_edge_label());
  }
  if (from._internal_grin_assume_all_vertex_list_sorted() != 0) {
    _this->_internal_set_grin_assume_all_vertex_list_sorted(from._internal_grin_assume_all_vertex_list_sorted());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndexTrait::CopyFrom(const IndexTrait& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grin.IndexTrait)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexTrait::IsInitialized() const {
  return true;
}

void IndexTrait::InternalSwap(IndexTrait* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IndexTrait, _impl_.grin_assume_all_vertex_list_sorted_)
      + sizeof(IndexTrait::_impl_.grin_assume_all_vertex_list_sorted_)
      - PROTOBUF_FIELD_OFFSET(IndexTrait, _impl_.grin_with_vertex_label_)>(
          reinterpret_cast<char*>(&_impl_.grin_with_vertex_label_),
          reinterpret_cast<char*>(&other->_impl_.grin_with_vertex_label_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IndexTrait::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[6]);
}

// ===================================================================

class PredicateTrait::_Internal {
 public:
};

PredicateTrait::PredicateTrait(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:grin.PredicateTrait)
}
PredicateTrait::PredicateTrait(const PredicateTrait& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  PredicateTrait* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:grin.PredicateTrait)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PredicateTrait::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PredicateTrait::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata PredicateTrait::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[7]);
}

// ===================================================================

class StorageTrait::_Internal {
 public:
  static const ::grin::TopologyTrait& topology_trait(const StorageTrait* msg);
  static const ::grin::PartitionTrait& partition_trait(const StorageTrait* msg);
  static const ::grin::PropertyTrait& property_trait(const StorageTrait* msg);
  static const ::grin::IndexTrait& index_trait(const StorageTrait* msg);
  static const ::grin::PredicateTrait& predicate_trait(const StorageTrait* msg);
};

const ::grin::TopologyTrait&
StorageTrait::_Internal::topology_trait(const StorageTrait* msg) {
  return *msg->_impl_.specific_trait_.topology_trait_;
}
const ::grin::PartitionTrait&
StorageTrait::_Internal::partition_trait(const StorageTrait* msg) {
  return *msg->_impl_.specific_trait_.partition_trait_;
}
const ::grin::PropertyTrait&
StorageTrait::_Internal::property_trait(const StorageTrait* msg) {
  return *msg->_impl_.specific_trait_.property_trait_;
}
const ::grin::IndexTrait&
StorageTrait::_Internal::index_trait(const StorageTrait* msg) {
  return *msg->_impl_.specific_trait_.index_trait_;
}
const ::grin::PredicateTrait&
StorageTrait::_Internal::predicate_trait(const StorageTrait* msg) {
  return *msg->_impl_.specific_trait_.predicate_trait_;
}
void StorageTrait::set_allocated_topology_trait(::grin::TopologyTrait* topology_trait) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specific_trait();
  if (topology_trait) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(topology_trait);
    if (message_arena != submessage_arena) {
      topology_trait = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topology_trait, submessage_arena);
    }
    set_has_topology_trait();
    _impl_.specific_trait_.topology_trait_ = topology_trait;
  }
  // @@protoc_insertion_point(field_set_allocated:grin.StorageTrait.topology_trait)
}
void StorageTrait::set_allocated_partition_trait(::grin::PartitionTrait* partition_trait) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specific_trait();
  if (partition_trait) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(partition_trait);
    if (message_arena != submessage_arena) {
      partition_trait = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partition_trait, submessage_arena);
    }
    set_has_partition_trait();
    _impl_.specific_trait_.partition_trait_ = partition_trait;
  }
  // @@protoc_insertion_point(field_set_allocated:grin.StorageTrait.partition_trait)
}
void StorageTrait::set_allocated_property_trait(::grin::PropertyTrait* property_trait) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specific_trait();
  if (property_trait) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(property_trait);
    if (message_arena != submessage_arena) {
      property_trait = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, property_trait, submessage_arena);
    }
    set_has_property_trait();
    _impl_.specific_trait_.property_trait_ = property_trait;
  }
  // @@protoc_insertion_point(field_set_allocated:grin.StorageTrait.property_trait)
}
void StorageTrait::set_allocated_index_trait(::grin::IndexTrait* index_trait) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specific_trait();
  if (index_trait) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(index_trait);
    if (message_arena != submessage_arena) {
      index_trait = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, index_trait, submessage_arena);
    }
    set_has_index_trait();
    _impl_.specific_trait_.index_trait_ = index_trait;
  }
  // @@protoc_insertion_point(field_set_allocated:grin.StorageTrait.index_trait)
}
void StorageTrait::set_allocated_predicate_trait(::grin::PredicateTrait* predicate_trait) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_specific_trait();
  if (predicate_trait) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(predicate_trait);
    if (message_arena != submessage_arena) {
      predicate_trait = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, predicate_trait, submessage_arena);
    }
    set_has_predicate_trait();
    _impl_.specific_trait_.predicate_trait_ = predicate_trait;
  }
  // @@protoc_insertion_point(field_set_allocated:grin.StorageTrait.predicate_trait)
}
StorageTrait::StorageTrait(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grin.StorageTrait)
}
StorageTrait::StorageTrait(const StorageTrait& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StorageTrait* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.specific_trait_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_specific_trait();
  switch (from.specific_trait_case()) {
    case kTopologyTrait: {
      _this->_internal_mutable_topology_trait()->::grin::TopologyTrait::MergeFrom(
          from._internal_topology_trait());
      break;
    }
    case kPartitionTrait: {
      _this->_internal_mutable_partition_trait()->::grin::PartitionTrait::MergeFrom(
          from._internal_partition_trait());
      break;
    }
    case kPropertyTrait: {
      _this->_internal_mutable_property_trait()->::grin::PropertyTrait::MergeFrom(
          from._internal_property_trait());
      break;
    }
    case kIndexTrait: {
      _this->_internal_mutable_index_trait()->::grin::IndexTrait::MergeFrom(
          from._internal_index_trait());
      break;
    }
    case kPredicateTrait: {
      _this->_internal_mutable_predicate_trait()->::grin::PredicateTrait::MergeFrom(
          from._internal_predicate_trait());
      break;
    }
    case SPECIFIC_TRAIT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:grin.StorageTrait)
}

inline void StorageTrait::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.specific_trait_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_specific_trait();
}

StorageTrait::~StorageTrait() {
  // @@protoc_insertion_point(destructor:grin.StorageTrait)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StorageTrait::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_specific_trait()) {
    clear_specific_trait();
  }
}

void StorageTrait::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StorageTrait::clear_specific_trait() {
// @@protoc_insertion_point(one_of_clear_start:grin.StorageTrait)
  switch (specific_trait_case()) {
    case kTopologyTrait: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.specific_trait_.topology_trait_;
      }
      break;
    }
    case kPartitionTrait: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.specific_trait_.partition_trait_;
      }
      break;
    }
    case kPropertyTrait: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.specific_trait_.property_trait_;
      }
      break;
    }
    case kIndexTrait: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.specific_trait_.index_trait_;
      }
      break;
    }
    case kPredicateTrait: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.specific_trait_.predicate_trait_;
      }
      break;
    }
    case SPECIFIC_TRAIT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = SPECIFIC_TRAIT_NOT_SET;
}


void StorageTrait::Clear() {
// @@protoc_insertion_point(message_clear_start:grin.StorageTrait)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_specific_trait();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StorageTrait::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .grin.TopologyTrait topology_trait = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_topology_trait(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .grin.PartitionTrait partition_trait = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_partition_trait(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .grin.PropertyTrait property_trait = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_property_trait(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .grin.IndexTrait index_trait = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_index_trait(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .grin.PredicateTrait predicate_trait = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_predicate_trait(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StorageTrait::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grin.StorageTrait)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .grin.TopologyTrait topology_trait = 1;
  if (_internal_has_topology_trait()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::topology_trait(this),
        _Internal::topology_trait(this).GetCachedSize(), target, stream);
  }

  // .grin.PartitionTrait partition_trait = 2;
  if (_internal_has_partition_trait()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::partition_trait(this),
        _Internal::partition_trait(this).GetCachedSize(), target, stream);
  }

  // .grin.PropertyTrait property_trait = 3;
  if (_internal_has_property_trait()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::property_trait(this),
        _Internal::property_trait(this).GetCachedSize(), target, stream);
  }

  // .grin.IndexTrait index_trait = 4;
  if (_internal_has_index_trait()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::index_trait(this),
        _Internal::index_trait(this).GetCachedSize(), target, stream);
  }

  // .grin.PredicateTrait predicate_trait = 5;
  if (_internal_has_predicate_trait()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::predicate_trait(this),
        _Internal::predicate_trait(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grin.StorageTrait)
  return target;
}

size_t StorageTrait::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grin.StorageTrait)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (specific_trait_case()) {
    // .grin.TopologyTrait topology_trait = 1;
    case kTopologyTrait: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.specific_trait_.topology_trait_);
      break;
    }
    // .grin.PartitionTrait partition_trait = 2;
    case kPartitionTrait: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.specific_trait_.partition_trait_);
      break;
    }
    // .grin.PropertyTrait property_trait = 3;
    case kPropertyTrait: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.specific_trait_.property_trait_);
      break;
    }
    // .grin.IndexTrait index_trait = 4;
    case kIndexTrait: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.specific_trait_.index_trait_);
      break;
    }
    // .grin.PredicateTrait predicate_trait = 5;
    case kPredicateTrait: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.specific_trait_.predicate_trait_);
      break;
    }
    case SPECIFIC_TRAIT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StorageTrait::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StorageTrait::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StorageTrait::GetClassData() const { return &_class_data_; }


void StorageTrait::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StorageTrait*>(&to_msg);
  auto& from = static_cast<const StorageTrait&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grin.StorageTrait)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.specific_trait_case()) {
    case kTopologyTrait: {
      _this->_internal_mutable_topology_trait()->::grin::TopologyTrait::MergeFrom(
          from._internal_topology_trait());
      break;
    }
    case kPartitionTrait: {
      _this->_internal_mutable_partition_trait()->::grin::PartitionTrait::MergeFrom(
          from._internal_partition_trait());
      break;
    }
    case kPropertyTrait: {
      _this->_internal_mutable_property_trait()->::grin::PropertyTrait::MergeFrom(
          from._internal_property_trait());
      break;
    }
    case kIndexTrait: {
      _this->_internal_mutable_index_trait()->::grin::IndexTrait::MergeFrom(
          from._internal_index_trait());
      break;
    }
    case kPredicateTrait: {
      _this->_internal_mutable_predicate_trait()->::grin::PredicateTrait::MergeFrom(
          from._internal_predicate_trait());
      break;
    }
    case SPECIFIC_TRAIT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StorageTrait::CopyFrom(const StorageTrait& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grin.StorageTrait)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StorageTrait::IsInitialized() const {
  return true;
}

void StorageTrait::InternalSwap(StorageTrait* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.specific_trait_, other->_impl_.specific_trait_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StorageTrait::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[8]);
}

// ===================================================================

class Statistics::_Internal {
 public:
};

Statistics::Statistics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grin.Statistics)
}
Statistics::Statistics(const Statistics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Statistics* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vertex_count_){}
    , decltype(_impl_.edge_count_){}
    , decltype(_impl_.partition_count_){}
    , decltype(_impl_.vertex_type_count_){}
    , decltype(_impl_.edge_type_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.vertex_count_, &from._impl_.vertex_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.edge_type_count_) -
    reinterpret_cast<char*>(&_impl_.vertex_count_)) + sizeof(_impl_.edge_type_count_));
  // @@protoc_insertion_point(copy_constructor:grin.Statistics)
}

inline void Statistics::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vertex_count_){0}
    , decltype(_impl_.edge_count_){0}
    , decltype(_impl_.partition_count_){0}
    , decltype(_impl_.vertex_type_count_){0}
    , decltype(_impl_.edge_type_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Statistics::~Statistics() {
  // @@protoc_insertion_point(destructor:grin.Statistics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Statistics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Statistics::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Statistics::Clear() {
// @@protoc_insertion_point(message_clear_start:grin.Statistics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.vertex_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.edge_type_count_) -
      reinterpret_cast<char*>(&_impl_.vertex_count_)) + sizeof(_impl_.edge_type_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Statistics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 vertex_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.vertex_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 edge_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.edge_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 partition_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.partition_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 vertex_type_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.vertex_type_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 edge_type_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.edge_type_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Statistics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grin.Statistics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vertex_count = 1;
  if (this->_internal_vertex_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_vertex_count(), target);
  }

  // int32 edge_count = 2;
  if (this->_internal_edge_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_edge_count(), target);
  }

  // int32 partition_count = 3;
  if (this->_internal_partition_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_partition_count(), target);
  }

  // int32 vertex_type_count = 4;
  if (this->_internal_vertex_type_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_vertex_type_count(), target);
  }

  // int32 edge_type_count = 5;
  if (this->_internal_edge_type_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_edge_type_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grin.Statistics)
  return target;
}

size_t Statistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grin.Statistics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 vertex_count = 1;
  if (this->_internal_vertex_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vertex_count());
  }

  // int32 edge_count = 2;
  if (this->_internal_edge_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_edge_count());
  }

  // int32 partition_count = 3;
  if (this->_internal_partition_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_partition_count());
  }

  // int32 vertex_type_count = 4;
  if (this->_internal_vertex_type_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_vertex_type_count());
  }

  // int32 edge_type_count = 5;
  if (this->_internal_edge_type_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_edge_type_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Statistics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Statistics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Statistics::GetClassData() const { return &_class_data_; }


void Statistics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Statistics*>(&to_msg);
  auto& from = static_cast<const Statistics&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grin.Statistics)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_vertex_count() != 0) {
    _this->_internal_set_vertex_count(from._internal_vertex_count());
  }
  if (from._internal_edge_count() != 0) {
    _this->_internal_set_edge_count(from._internal_edge_count());
  }
  if (from._internal_partition_count() != 0) {
    _this->_internal_set_partition_count(from._internal_partition_count());
  }
  if (from._internal_vertex_type_count() != 0) {
    _this->_internal_set_vertex_type_count(from._internal_vertex_type_count());
  }
  if (from._internal_edge_type_count() != 0) {
    _this->_internal_set_edge_type_count(from._internal_edge_type_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Statistics::CopyFrom(const Statistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grin.Statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Statistics::IsInitialized() const {
  return true;
}

void Statistics::InternalSwap(Statistics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Statistics, _impl_.edge_type_count_)
      + sizeof(Statistics::_impl_.edge_type_count_)
      - PROTOBUF_FIELD_OFFSET(Statistics, _impl_.vertex_count_)>(
          reinterpret_cast<char*>(&_impl_.vertex_count_),
          reinterpret_cast<char*>(&other->_impl_.vertex_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Statistics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[9]);
}

// ===================================================================

class Graph::_Internal {
 public:
  static const ::grin::Statistics& statistics(const Graph* msg);
};

const ::grin::Statistics&
Graph::_Internal::statistics(const Graph* msg) {
  return *msg->_impl_.statistics_;
}
Graph::Graph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:grin.Graph)
}
Graph::Graph(const Graph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Graph* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.traits_){from._impl_.traits_}
    , decltype(_impl_.uri_){}
    , decltype(_impl_.grin_version_){}
    , decltype(_impl_.statistics_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uri().empty()) {
    _this->_impl_.uri_.Set(from._internal_uri(), 
      _this->GetArenaForAllocation());
  }
  _impl_.grin_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.grin_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_grin_version().empty()) {
    _this->_impl_.grin_version_.Set(from._internal_grin_version(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_statistics()) {
    _this->_impl_.statistics_ = new ::grin::Statistics(*from._impl_.statistics_);
  }
  // @@protoc_insertion_point(copy_constructor:grin.Graph)
}

inline void Graph::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.traits_){arena}
    , decltype(_impl_.uri_){}
    , decltype(_impl_.grin_version_){}
    , decltype(_impl_.statistics_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.uri_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uri_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.grin_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.grin_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Graph::~Graph() {
  // @@protoc_insertion_point(destructor:grin.Graph)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Graph::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.traits_.~RepeatedPtrField();
  _impl_.uri_.Destroy();
  _impl_.grin_version_.Destroy();
  if (this != internal_default_instance()) delete _impl_.statistics_;
}

void Graph::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Graph::Clear() {
// @@protoc_insertion_point(message_clear_start:grin.Graph)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.traits_.Clear();
  _impl_.uri_.ClearToEmpty();
  _impl_.grin_version_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.statistics_ != nullptr) {
    delete _impl_.statistics_;
  }
  _impl_.statistics_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Graph::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string uri = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grin.Graph.uri"));
        } else
          goto handle_unusual;
        continue;
      // string grin_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_grin_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "grin.Graph.grin_version"));
        } else
          goto handle_unusual;
        continue;
      // repeated .grin.StorageTrait traits = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_traits(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .grin.Statistics statistics = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_statistics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Graph::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:grin.Graph)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string uri = 1;
  if (!this->_internal_uri().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grin.Graph.uri");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uri(), target);
  }

  // string grin_version = 2;
  if (!this->_internal_grin_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_grin_version().data(), static_cast<int>(this->_internal_grin_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "grin.Graph.grin_version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_grin_version(), target);
  }

  // repeated .grin.StorageTrait traits = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_traits_size()); i < n; i++) {
    const auto& repfield = this->_internal_traits(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .grin.Statistics statistics = 4;
  if (this->_internal_has_statistics()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::statistics(this),
        _Internal::statistics(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:grin.Graph)
  return target;
}

size_t Graph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:grin.Graph)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .grin.StorageTrait traits = 3;
  total_size += 1UL * this->_internal_traits_size();
  for (const auto& msg : this->_impl_.traits_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string uri = 1;
  if (!this->_internal_uri().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uri());
  }

  // string grin_version = 2;
  if (!this->_internal_grin_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_grin_version());
  }

  // .grin.Statistics statistics = 4;
  if (this->_internal_has_statistics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.statistics_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Graph::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Graph::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Graph::GetClassData() const { return &_class_data_; }


void Graph::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Graph*>(&to_msg);
  auto& from = static_cast<const Graph&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:grin.Graph)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.traits_.MergeFrom(from._impl_.traits_);
  if (!from._internal_uri().empty()) {
    _this->_internal_set_uri(from._internal_uri());
  }
  if (!from._internal_grin_version().empty()) {
    _this->_internal_set_grin_version(from._internal_grin_version());
  }
  if (from._internal_has_statistics()) {
    _this->_internal_mutable_statistics()->::grin::Statistics::MergeFrom(
        from._internal_statistics());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Graph::CopyFrom(const Graph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:grin.Graph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Graph::IsInitialized() const {
  return true;
}

void Graph::InternalSwap(Graph* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.traits_.InternalSwap(&other->_impl_.traits_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uri_, lhs_arena,
      &other->_impl_.uri_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.grin_version_, lhs_arena,
      &other->_impl_.grin_version_, rhs_arena
  );
  swap(_impl_.statistics_, other->_impl_.statistics_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Graph::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_graph_2eproto_getter, &descriptor_table_graph_2eproto_once,
      file_level_metadata_graph_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace grin
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::grin::TopologyTrait*
Arena::CreateMaybeMessage< ::grin::TopologyTrait >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grin::TopologyTrait >(arena);
}
template<> PROTOBUF_NOINLINE ::grin::MirrorPartitionListTrait*
Arena::CreateMaybeMessage< ::grin::MirrorPartitionListTrait >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grin::MirrorPartitionListTrait >(arena);
}
template<> PROTOBUF_NOINLINE ::grin::PartitionTrait*
Arena::CreateMaybeMessage< ::grin::PartitionTrait >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grin::PartitionTrait >(arena);
}
template<> PROTOBUF_NOINLINE ::grin::VertexPropertyTrait*
Arena::CreateMaybeMessage< ::grin::VertexPropertyTrait >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grin::VertexPropertyTrait >(arena);
}
template<> PROTOBUF_NOINLINE ::grin::EdgePropertyTrait*
Arena::CreateMaybeMessage< ::grin::EdgePropertyTrait >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grin::EdgePropertyTrait >(arena);
}
template<> PROTOBUF_NOINLINE ::grin::PropertyTrait*
Arena::CreateMaybeMessage< ::grin::PropertyTrait >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grin::PropertyTrait >(arena);
}
template<> PROTOBUF_NOINLINE ::grin::IndexTrait*
Arena::CreateMaybeMessage< ::grin::IndexTrait >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grin::IndexTrait >(arena);
}
template<> PROTOBUF_NOINLINE ::grin::PredicateTrait*
Arena::CreateMaybeMessage< ::grin::PredicateTrait >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grin::PredicateTrait >(arena);
}
template<> PROTOBUF_NOINLINE ::grin::StorageTrait*
Arena::CreateMaybeMessage< ::grin::StorageTrait >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grin::StorageTrait >(arena);
}
template<> PROTOBUF_NOINLINE ::grin::Statistics*
Arena::CreateMaybeMessage< ::grin::Statistics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grin::Statistics >(arena);
}
template<> PROTOBUF_NOINLINE ::grin::Graph*
Arena::CreateMaybeMessage< ::grin::Graph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::grin::Graph >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
